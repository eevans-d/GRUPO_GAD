# ======================================================================
# GRUPO_GAD - CONFIGURACIÓN DE ENTORNO
# Sistema de Gestión Administrativa Gubernamental
# ======================================================================
# 
# IMPORTANTE - SEGURIDAD GUBERNAMENTAL:
# 1. Copiar este archivo a .env y configurar con valores reales
# 2. NUNCA versionar el archivo .env con valores reales
# 3. En producción, usar gestores de secretos (Vault, AWS Secrets Manager, etc.)
# 4. Rotar secretos regularmente según políticas gubernamentales
# 5. JWT_SECRET_KEY y SECRET_KEY deben ser únicos y de al menos 32 caracteres
# 6. Todos los valores CHANGEME_* DEBEN ser reemplazados
#
# ======================================================================

# ------------------------------------------------------------------
# GENERAL PROJECT CONFIGURATION
# ------------------------------------------------------------------
# Environment: development, staging, production
# CRÍTICO: En producción usar 'production' para habilitar seguridad completa
ENVIRONMENT=development
LOG_LEVEL=INFO
TZ=UTC

# Información del proyecto
PROJECT_NAME=GRUPO_GAD
PROJECT_VERSION=1.1.0
PROJECT_DESCRIPTION="Sistema de Gestión Administrativa Gubernamental"

# ------------------------------------------------------------------
# DATABASE (POSTGIS) - DATOS CIUDADANOS
# ------------------------------------------------------------------
# ADVERTENCIA: Proteger estas credenciales - contienen acceso a datos ciudadanos
POSTGRES_USER=gad_user
POSTGRES_PASSWORD=CHANGEME_SECURE_POSTGRES_PASSWORD_MIN_16_CHARS
POSTGRES_DB=grupo_gad_dev
POSTGRES_SERVER=db
POSTGRES_PORT=5432

# Full connection URL for the application
# Para desarrollo local: postgresql+asyncpg://user:pass@localhost:5433/db
# Para producción: usar DATABASE_URL desde gestor de secretos
DATABASE_URL=postgresql+asyncpg://gad_user:CHANGEME_SECURE_POSTGRES_PASSWORD_MIN_16_CHARS@db:5432/grupo_gad_dev

# ------------------------------------------------------------------
# API & SECURITY - AUTENTICACIÓN GUBERNAMENTAL
# ------------------------------------------------------------------
# CRÍTICO: JWT_SECRET_KEY protege autenticación ciudadana
# Generar con: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=CHANGEME_RANDOM_SECRET_KEY_MIN_32_CHARS_SECURE
JWT_SECRET_KEY=CHANGEME_JWT_SECRET_KEY_MIN_32_CHARS_HIGHLY_SECURE
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=60

# CORS - Orígenes permitidos (separados por coma)
# Producción: dominios específicos gubernamentales
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000
ALLOWED_HOSTS=localhost,127.0.0.1,grupo-gad.gob.local

# Proxy confiables (para X-Forwarded-For)
TRUSTED_PROXY_HOSTS=localhost,127.0.0.1

# ------------------------------------------------------------------
# TELEGRAM BOT - CANAL CIUDADANO
# ------------------------------------------------------------------
# Token desde @BotFather en Telegram
TELEGRAM_TOKEN=CHANGEME_TELEGRAM_BOT_TOKEN_FROM_BOTFATHER
ADMIN_CHAT_ID=CHANGEME_TELEGRAM_ADMIN_CHAT_ID

# Whitelisted Telegram user IDs (JSON array)
# Producción: IDs de operadores autorizados
WHITELIST_IDS='[]'

# ------------------------------------------------------------------
# REDIS - WEBSOCKET SCALING (OPCIONAL)
# ------------------------------------------------------------------
# Dejar vacío si no se requiere multi-worker WebSocket scaling
# Producción: Configurar para escalabilidad
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=

# ------------------------------------------------------------------
# RATE LIMITING - PROTECCIÓN CIUDADANA
# ------------------------------------------------------------------
# Habilitar rate limiting para proteger servicios ciudadanos
# Producción: SIEMPRE habilitado (true)
RATE_LIMITING_ENABLED=true

# ------------------------------------------------------------------
# NOTAS DE SEGURIDAD GUBERNAMENTAL
# ------------------------------------------------------------------
# 1. Valores DEFAULT son INSEGUROS para producción
# 2. En staging/producción validar:
#    - JWT_SECRET_KEY mínimo 32 caracteres aleatorios
#    - POSTGRES_PASSWORD mínimo 16 caracteres complejos
#    - CORS_ALLOWED_ORIGINS lista explícita de dominios
#    - ENVIRONMENT='production' para seguridad completa
# 3. Usar gestores de secretos en producción:
#    - Docker Secrets
#    - HashiCorp Vault
#    - AWS Secrets Manager
#    - Azure Key Vault
# 4. Rotar secretos cada 90 días según política gubernamental
# 5. Auditar accesos a secretos regularmente
# ======================================================================
