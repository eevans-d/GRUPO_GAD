name: CI Pipeline

on:
  push:
    branches: [ "**" ]
    paths:
      - "src/**"
      - "tests/**"
      - "config/**"
      - "alembic/**"
      - "pyproject.toml"
      - "requirements.txt"
      - "poetry.lock"
      - "docker/**"
      - ".github/workflows/**"
  pull_request:
    branches: [ "main", "master", "develop" ]
    paths:
      - "src/**"
      - "tests/**"
      - "config/**"
      - "alembic/**"
      - "pyproject.toml"
      - "requirements.txt"
      - "poetry.lock"
      - "docker/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '2.1.4'

jobs:
  # Job 1: Análisis estático y seguridad
  static-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipx
          pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --with dev

      - name: Code formatting check (ruff)
        run: poetry run ruff check .

      - name: Type checking (mypy)
        run: poetry run mypy src config

      - name: Security scan (Semgrep)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/security-audit

      - name: Dependency audit (pip-audit)
        run: poetry run pip-audit --desc || true

  # Job 2: Tests unitarios y de integración
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-type: [unit, integration]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: grupogad_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipx
          pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        env:
          DATABASE_URL: "sqlite+aiosqlite:///:memory:"
          ENVIRONMENT: "test"
        run: |
          poetry run pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        env:
          DATABASE_URL: "postgresql+asyncpg://postgres:postgres@localhost:5432/grupogad_test"
          REDIS_URL: "redis://localhost:6379/0"
          ENVIRONMENT: "test"
        run: |
          poetry run pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: Validación de Docker
  docker-build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build API Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.api
          push: false
          tags: grupogad/api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 4: Tests E2E (solo en branches principales)
  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker compose --version

      - name: Start services
        run: |
          docker compose up -d --build
          sleep 30  # Esperar a que los servicios estén listos

      - name: Run E2E tests
        run: |
          # Health check
          curl -f http://localhost:8000/api/v1/health
          
          # Metrics check
          curl -f http://localhost:8000/metrics
          
          # WebSocket smoke test
          python scripts/ws_smoke_test.py

      - name: Collect logs on failure
        if: failure()
        run: |
          docker compose logs api
          docker compose logs db
          docker compose logs redis

      - name: Cleanup
        if: always()
        run: docker compose down -v

  # Job 5: Análisis de calidad final
  quality-gate:
    runs-on: ubuntu-latest
    needs: [static-analysis, test, docker-build]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Static Analysis: ${{ needs.static-analysis.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Docker Build: ${{ needs.docker-build.result }}"
          
          if [[ "${{ needs.static-analysis.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "❌ Quality gate failed"
            exit 1
          else
            echo "✅ Quality gate passed"
          fi