name: CI

on:
  push:
    branches: [ "**" ]
    paths:
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
      - "requirements.txt"
      - "poetry.lock"
      - ".github/workflows/**"
  pull_request:
    branches: [ "**" ]
    paths:
      - "src/**"
      - "tests/**"
      - "pyproject.toml"
      - "requirements.txt"
      - "poetry.lock"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install pipx (for Poetry)
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipx
          python -m pipx ensurepath
        shell: bash

      - name: Install Poetry 2.x
        run: |
          pipx install poetry==2.1.4
          poetry --version
        shell: bash

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
        shell: bash

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install --with dev
        shell: bash

      - name: Lint (ruff)
        run: |
          poetry run ruff check .
        shell: bash

      - name: Security scan (Semgrep)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/security-audit

      - name: Dependency audit (pip-audit)
        run: |
          poetry run pip-audit -r requirements.lock || true
        shell: bash

      - name: Type check (mypy)
        run: |
          poetry run mypy
        shell: bash

      - name: Run tests (pytest + coverage)
        env:
          DATABASE_URL: "sqlite+aiosqlite:///:memory:"
        run: |
          poetry run pytest --disable-warnings -v
        shell: bash

      - name: Coverage summary
        if: always()
        run: |
          if [ -f htmlcov/index.html ]; then echo "Coverage HTML generated"; fi
        shell: bash

      - name: Upload coverage HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov
          path: htmlcov