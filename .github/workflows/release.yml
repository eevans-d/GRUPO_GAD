name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-release:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Check if it's a prerelease (contains alpha, beta, rc)
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Version: $VERSION"
          echo "Is prerelease: ${{ steps.version.outputs.is-prerelease }}"

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: ${{ steps.version.outputs.version }}"
            echo "Expected format: v1.0.0 or v1.0.0-alpha1"
            exit 1
          fi

  build-release-artifacts:
    needs: validate-release
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      api-image: ${{ steps.api-meta.outputs.tags }}
      api-digest: ${{ steps.api-build.outputs.digest }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API
        id: api-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/api
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}

      - name: Build and push API image
        id: api-build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.api
          push: true
          tags: ${{ steps.api-meta.outputs.tags }}
          labels: ${{ steps.api-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  generate-changelog:
    needs: validate-release
    runs-on: ubuntu-latest
    
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ needs.validate-release.outputs.version }}"
          
          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
          
          # Generate changelog using git log
          if [[ -n "$PREVIOUS_TAG" ]]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi
          
          # Save changelog to file and output
          echo "$CHANGELOG" > changelog.txt
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.txt

  create-github-release:
    needs: [validate-release, build-release-artifacts, generate-changelog]
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: Release ${{ needs.validate-release.outputs.version }}
          body: |
            ## 🚀 Release ${{ needs.validate-release.outputs.version }}
            
            ### 📦 Artifacts
            - **API Docker Image**: `${{ needs.build-release-artifacts.outputs.api-image }}`
            - **Image Digest**: `${{ needs.build-release-artifacts.outputs.api-digest }}`
            
            ### 📝 Changes
            ${{ needs.generate-changelog.outputs.changelog }}
            
            ### 🏗️ Deployment
            ```bash
            # Pull the new image
            docker pull ${{ needs.build-release-artifacts.outputs.api-image }}
            
            # Update your docker-compose.yml to use this version
            # Then restart your services
            docker compose up -d
            ```
            
            ### ✅ Verification
            After deployment, verify the release:
            ```bash
            curl -f https://your-domain.com/api/v1/health
            curl -f https://your-domain.com/metrics
            ```
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}

  notify-release:
    needs: [validate-release, create-github-release]
    runs-on: ubuntu-latest
    if: always() && needs.create-github-release.result == 'success'
    
    steps:
      - name: Notify successful release
        run: |
          echo "🎉 Release ${{ needs.validate-release.outputs.version }} created successfully!"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"