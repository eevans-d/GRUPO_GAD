[
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 35,
  "EndLine": 36,
  "StartColumn": 2,
  "EndColumn": 1,
  "Match": "SECRET_KEY=51e548c3fb9dbca43ce2277bcbf848bd00426ef0db0cd1dd9fd1112b8bd8def2",
  "Secret": "51e548c3fb9dbca43ce2277bcbf848bd00426ef0db0cd1dd9fd1112b8bd8def2",
  "File": ".env.staging",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.772226,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".env.staging:generic-api-key:35"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 36,
  "EndLine": 37,
  "StartColumn": 6,
  "EndColumn": 1,
  "Match": "SECRET_KEY=8b7e4104a727512815c09f2d1d06f8033387392a78cd858f94d0ed39ca308869",
  "Secret": "8b7e4104a727512815c09f2d1d06f8033387392a78cd858f94d0ed39ca308869",
  "File": ".env.staging",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.8413713,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".env.staging:generic-api-key:36"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 15,
  "EndLine": 16,
  "StartColumn": 2,
  "EndColumn": 1,
  "Match": "SECRET_KEY=4e7d3b2c5f6a8d9e0f1a2b3c4d5e6f708192a3b4c5d6e7f8091a2b3c4d5e6f70",
  "Secret": "4e7d3b2c5f6a8d9e0f1a2b3c4d5e6f708192a3b4c5d6e7f8091a2b3c4d5e6f70",
  "File": ".env.production",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.9829128,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".env.production:generic-api-key:15"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 18,
  "EndLine": 19,
  "StartColumn": 2,
  "EndColumn": 1,
  "Match": "SECRET_KEY=CAMBIAR_POR_CLAVE_SEGURA_DE_64_CARACTERES_EXACTAMENTE_ESTO_ES_CRITICO",
  "Secret": "CAMBIAR_POR_CLAVE_SEGURA_DE_64_CARACTERES_EXACTAMENTE_ESTO_ES_CRITICO",
  "File": ".env.production.example",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.8372312,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".env.production.example:generic-api-key:18"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 1139,
  "EndLine": 1139,
  "StartColumn": 5,
  "EndColumn": 29,
  "Match": "API_KEY = \"sk-1234567890\"",
  "Secret": "sk-1234567890",
  "File": ".github/agents/03_SOFTWARE_DEVELOPER.md",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.7004397,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".github/agents/03_SOFTWARE_DEVELOPER.md:generic-api-key:1139"
 },
 {
  "Description": "Uncovered a JSON Web Token, which may lead to unauthorized access to web applications and sensitive user data.",
  "StartLine": 89,
  "EndLine": 90,
  "StartColumn": 6,
  "EndColumn": 1,
  "Match": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg",
  "Secret": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg",
  "File": ".venv/lib/python3.12/site-packages/PyJWT-2.10.1.dist-info/METADATA",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 5.311632,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "jwt",
  "Fingerprint": ".venv/lib/python3.12/site-packages/PyJWT-2.10.1.dist-info/METADATA:jwt:89"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 5,
  "EndLine": 5,
  "StartColumn": 752,
  "EndColumn": 823,
  "Match": "-----BEGIN OPENSSH PRIVATE KEY-----s!\u0000\u0000\u0000-----END OPENSSH PRIVATE KEY----",
  "Secret": "-----BEGIN OPENSSH PRIVATE KEY-----s!\u0000\u0000\u0000-----END OPENSSH PRIVATE KEY----",
  "File": ".venv/lib/python3.12/site-packages/cryptography/hazmat/primitives/serialization/__pycache__/ssh.cpython-312.pyc",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.8125615,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/cryptography/hazmat/primitives/serialization/__pycache__/ssh.cpython-312.pyc:private-key:5"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 78,
  "EndLine": 79,
  "StartColumn": 16,
  "EndColumn": 45,
  "Match": "-----BEGIN OPENSSH PRIVATE KEY-----\"\n_SK_END = b\"-----END OPENSSH PRIVATE KEY----",
  "Secret": "-----BEGIN OPENSSH PRIVATE KEY-----\"\n_SK_END = b\"-----END OPENSSH PRIVATE KEY----",
  "File": ".venv/lib/python3.12/site-packages/cryptography/hazmat/primitives/serialization/ssh.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.9451709,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/cryptography/hazmat/primitives/serialization/ssh.py:private-key:78"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 56,
  "EndLine": 57,
  "StartColumn": 6,
  "EndColumn": 1,
  "Match": "key: ed25519.Ed25519PrivateKey",
  "Secret": "ed25519.Ed25519PrivateKey",
  "File": ".venv/lib/python3.12/site-packages/dns/dnssecalgs/eddsa.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.8136606,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/dns/dnssecalgs/eddsa.py:generic-api-key:56"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 57,
  "EndLine": 58,
  "StartColumn": 6,
  "EndColumn": 1,
  "Match": "key_cls = ed25519.Ed25519PrivateKey",
  "Secret": "ed25519.Ed25519PrivateKey",
  "File": ".venv/lib/python3.12/site-packages/dns/dnssecalgs/eddsa.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.8136606,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/dns/dnssecalgs/eddsa.py:generic-api-key:57"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 68,
  "EndLine": 69,
  "StartColumn": 6,
  "EndColumn": 1,
  "Match": "key: ed448.Ed448PrivateKey",
  "Secret": "ed448.Ed448PrivateKey",
  "File": ".venv/lib/python3.12/site-packages/dns/dnssecalgs/eddsa.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.5944657,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/dns/dnssecalgs/eddsa.py:generic-api-key:68"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 69,
  "EndLine": 70,
  "StartColumn": 6,
  "EndColumn": 1,
  "Match": "key_cls = ed448.Ed448PrivateKey",
  "Secret": "ed448.Ed448PrivateKey",
  "File": ".venv/lib/python3.12/site-packages/dns/dnssecalgs/eddsa.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.5944657,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/dns/dnssecalgs/eddsa.py:generic-api-key:69"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 152,
  "EndLine": 153,
  "StartColumn": 28,
  "EndColumn": 1,
  "Match": "key.secret_multiplier = ecdh1.private_key.curve.order",
  "Secret": "ecdh1.private_key.curve.order",
  "File": ".venv/lib/python3.12/site-packages/ecdsa/test_ecdh.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.8109283,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/ecdsa/test_ecdh.py:generic-api-key:152"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 326,
  "EndLine": 326,
  "StartColumn": 10,
  "EndColumn": 68,
  "Match": "secret = \"8f457e34982478d1c34b9cd2d0c15911b72dd60d869e2cea\"",
  "Secret": "8f457e34982478d1c34b9cd2d0c15911b72dd60d869e2cea",
  "File": ".venv/lib/python3.12/site-packages/ecdsa/test_ecdh.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.8553886,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/ecdsa/test_ecdh.py:generic-api-key:326"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 305,
  "EndLine": 320,
  "StartColumn": 7,
  "EndColumn": 29,
  "Match": "-----BEGIN EC PRIVATE KEY-----\\n\"\n    \"MF8CAQEEGF7IQgvW75JSqULpiQQ8op9WH6Uldw6xxaAKBggqhkjOPQMBAaE0AzIA\\n\"\n    \"BLiBd9CE7xf15FY5QIAoNg+fWbSk1yZOYtoGUdzkejWkxbRc9RWTQjqLVXucIJnz\\n\"\n    \"bA==\\n\"\n    \"-----END EC PRIVATE KEY-----\\n\"\n)\nder_local_private_key = (\n    \"305f02010104185ec8420bd6ef9252a942e989043ca29f561fa525770eb1c5a00a06082a864\"\n    \"8ce3d030101a13403320004b88177d084ef17f5e45639408028360f9f59b4a4d7264e62da06\"\n    \"51dce47a35a4c5b45cf51593423a8b557b9c2099f36c\"\n)\npem_remote_public_key = (\n    \"-----BEGIN PUBLIC KEY-----\\n\"\n    \"MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEuIF30ITvF/XkVjlAgCg2D59ZtKTX\\n\"\n    \"Jk5i2gZR3OR6NaTFtFz1FZNCOotVe5wgmfNs\\n\"\n    \"-----END PUBLIC KEY----",
  "Secret": "-----BEGIN EC PRIVATE KEY-----\\n\"\n    \"MF8CAQEEGF7IQgvW75JSqULpiQQ8op9WH6Uldw6xxaAKBggqhkjOPQMBAaE0AzIA\\n\"\n    \"BLiBd9CE7xf15FY5QIAoNg+fWbSk1yZOYtoGUdzkejWkxbRc9RWTQjqLVXucIJnz\\n\"\n    \"bA==\\n\"\n    \"-----END EC PRIVATE KEY-----\\n\"\n)\nder_local_private_key = (\n    \"305f02010104185ec8420bd6ef9252a942e989043ca29f561fa525770eb1c5a00a06082a864\"\n    \"8ce3d030101a13403320004b88177d084ef17f5e45639408028360f9f59b4a4d7264e62da06\"\n    \"51dce47a35a4c5b45cf51593423a8b557b9c2099f36c\"\n)\npem_remote_public_key = (\n    \"-----BEGIN PUBLIC KEY-----\\n\"\n    \"MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEuIF30ITvF/XkVjlAgCg2D59ZtKTX\\n\"\n    \"Jk5i2gZR3OR6NaTFtFz1FZNCOotVe5wgmfNs\\n\"\n    \"-----END PUBLIC KEY----",
  "File": ".venv/lib/python3.12/site-packages/ecdsa/test_ecdh.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 5.7030716,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/ecdsa/test_ecdh.py:private-key:305"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 144,
  "EndLine": 207,
  "StartColumn": 15,
  "EndColumn": 37,
  "Match": "-----BEGIN EC PRIVATE KEY-----\\n\"\n            \"MF8CAQEEGF7IQgvW75JSqULpiQQ8op9WH6Uldw6xxaAKBggqhkjOPQMBAaE0AzIA\\n\"\n            \"BLiBd9CE7xf15FY5QIAoNg+fWbSk1yZOYtoGUdzkejWkxbRc9RWTQjqLVXucIJnz\\n\"\n            \"bA==\\n\"\n            \"-----END EC PRIVATE KEY-----\\n\"\n        )\n        key_str = (\n            \"-----BEGIN PUBLIC KEY-----\\n\"\n            \"MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEuIF30ITvF/XkVjlAgCg2D59ZtKTX\\n\"\n            \"Jk5i2gZR3OR6NaTFtFz1FZNCOotVe5wgmfNs\\n\"\n            \"-----END PUBLIC KEY-----\\n\"\n        )\n        cls.key_pem = key_str\n\n        cls.key_bytes = unpem(key_str)\n        assert isinstance(cls.key_bytes, bytes)\n        cls.vk = VerifyingKey.from_pem(key_str)\n        cls.sk = SigningKey.from_pem(prv_key_str)\n\n        key_str = (\n            \"-----BEGIN PUBLIC KEY-----\\n\"\n            \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE4H3iRbG4TSrsSRb/gusPQB/4YcN8\\n\"\n            \"Poqzgjau4kfxBPyZimeRfuY/9g/wMmPuhGl4BUve51DsnKJFRr8psk0ieA==\\n\"\n            \"-----END PUBLIC KEY-----\\n\"\n        )\n        cls.vk2 = VerifyingKey.from_pem(key_str)\n\n        cls.sk2 = SigningKey.generate(vk.curve)\n\n    def test_load_key_with_explicit_parameters(self):\n        pub_key_str = (\n            \"-----BEGIN PUBLIC KEY-----\\n\"\n            \"MIIBSzCCAQMGByqGSM49AgEwgfcCAQEwLAYHKoZIzj0BAQIhAP////8AAAABAAAA\\n\"\n            \"AAAAAAAAAAAA////////////////MFsEIP////8AAAABAAAAAAAAAAAAAAAA////\\n\"\n            \"///////////8BCBaxjXYqjqT57PrvVV2mIa8ZR0GsMxTsPY7zjw+J9JgSwMVAMSd\\n\"\n            \"NgiG5wSTamZ44ROdJreBn36QBEEEaxfR8uEsQkf4vOblY6RA8ncDfYEt6zOg9KE5\\n\"\n            \"RdiYwpZP40Li/hp/m47n60p8D54WK84zV2sxXs7LtkBoN79R9QIhAP////8AAAAA\\n\"\n            \"//////////+85vqtpxeehPO5ysL8YyVRAgEBA0IABIr1UkgYs5jmbFc7it1/YI2X\\n\"\n            \"T//IlaEjMNZft1owjqpBYH2ErJHk4U5Pp4WvWq1xmHwIZlsH7Ig4KmefCfR6SmU=\\n\"\n            \"-----END PUBLIC KEY-----\"\n        )\n        pk = VerifyingKey.from_pem(pub_key_str)\n\n        pk_exp = VerifyingKey.from_string(\n            b\"\\x04\\x8a\\xf5\\x52\\x48\\x18\\xb3\\x98\\xe6\\x6c\\x57\\x3b\\x8a\\xdd\\x7f\"\n            b\"\\x60\\x8d\\x97\\x4f\\xff\\xc8\\x95\\xa1\\x23\\x30\\xd6\\x5f\\xb7\\x5a\\x30\"\n            b\"\\x8e\\xaa\\x41\\x60\\x7d\\x84\\xac\\x91\\xe4\\xe1\\x4e\\x4f\\xa7\\x85\\xaf\"\n            b\"\\x5a\\xad\\x71\\x98\\x7c\\x08\\x66\\x5b\\x07\\xec\\x88\\x38\\x2a\\x67\\x9f\"\n            b\"\\x09\\xf4\\x7a\\x4a\\x65\",\n            curve=NIST256p,\n        )\n        self.assertEqual(pk, pk_exp)\n\n    def test_load_key_with_explicit_with_explicit_disabled(self):\n        pub_key_str = (\n            \"-----BEGIN PUBLIC KEY-----\\n\"\n            \"MIIBSzCCAQMGByqGSM49AgEwgfcCAQEwLAYHKoZIzj0BAQIhAP////8AAAABAAAA\\n\"\n            \"AAAAAAAAAAAA////////////////MFsEIP////8AAAABAAAAAAAAAAAAAAAA////\\n\"\n            \"///////////8BCBaxjXYqjqT57PrvVV2mIa8ZR0GsMxTsPY7zjw+J9JgSwMVAMSd\\n\"\n            \"NgiG5wSTamZ44ROdJreBn36QBEEEaxfR8uEsQkf4vOblY6RA8ncDfYEt6zOg9KE5\\n\"\n            \"RdiYwpZP40Li/hp/m47n60p8D54WK84zV2sxXs7LtkBoN79R9QIhAP////8AAAAA\\n\"\n            \"//////////+85vqtpxeehPO5ysL8YyVRAgEBA0IABIr1UkgYs5jmbFc7it1/YI2X\\n\"\n            \"T//IlaEjMNZft1owjqpBYH2ErJHk4U5Pp4WvWq1xmHwIZlsH7Ig4KmefCfR6SmU=\\n\"\n            \"-----END PUBLIC KEY----",
  "Secret": "-----BEGIN EC PRIVATE KEY-----\\n\"\n            \"MF8CAQEEGF7IQgvW75JSqULpiQQ8op9WH6Uldw6xxaAKBggqhkjOPQMBAaE0AzIA\\n\"\n            \"BLiBd9CE7xf15FY5QIAoNg+fWbSk1yZOYtoGUdzkejWkxbRc9RWTQjqLVXucIJnz\\n\"\n            \"bA==\\n\"\n            \"-----END EC PRIVATE KEY-----\\n\"\n        )\n        key_str = (\n            \"-----BEGIN PUBLIC KEY-----\\n\"\n            \"MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEuIF30ITvF/XkVjlAgCg2D59ZtKTX\\n\"\n            \"Jk5i2gZR3OR6NaTFtFz1FZNCOotVe5wgmfNs\\n\"\n            \"-----END PUBLIC KEY-----\\n\"\n        )\n        cls.key_pem = key_str\n\n        cls.key_bytes = unpem(key_str)\n        assert isinstance(cls.key_bytes, bytes)\n        cls.vk = VerifyingKey.from_pem(key_str)\n        cls.sk = SigningKey.from_pem(prv_key_str)\n\n        key_str = (\n            \"-----BEGIN PUBLIC KEY-----\\n\"\n            \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE4H3iRbG4TSrsSRb/gusPQB/4YcN8\\n\"\n            \"Poqzgjau4kfxBPyZimeRfuY/9g/wMmPuhGl4BUve51DsnKJFRr8psk0ieA==\\n\"\n            \"-----END PUBLIC KEY-----\\n\"\n        )\n        cls.vk2 = VerifyingKey.from_pem(key_str)\n\n        cls.sk2 = SigningKey.generate(vk.curve)\n\n    def test_load_key_with_explicit_parameters(self):\n        pub_key_str = (\n            \"-----BEGIN PUBLIC KEY-----\\n\"\n            \"MIIBSzCCAQMGByqGSM49AgEwgfcCAQEwLAYHKoZIzj0BAQIhAP////8AAAABAAAA\\n\"\n            \"AAAAAAAAAAAA////////////////MFsEIP////8AAAABAAAAAAAAAAAAAAAA////\\n\"\n            \"///////////8BCBaxjXYqjqT57PrvVV2mIa8ZR0GsMxTsPY7zjw+J9JgSwMVAMSd\\n\"\n            \"NgiG5wSTamZ44ROdJreBn36QBEEEaxfR8uEsQkf4vOblY6RA8ncDfYEt6zOg9KE5\\n\"\n            \"RdiYwpZP40Li/hp/m47n60p8D54WK84zV2sxXs7LtkBoN79R9QIhAP////8AAAAA\\n\"\n            \"//////////+85vqtpxeehPO5ysL8YyVRAgEBA0IABIr1UkgYs5jmbFc7it1/YI2X\\n\"\n            \"T//IlaEjMNZft1owjqpBYH2ErJHk4U5Pp4WvWq1xmHwIZlsH7Ig4KmefCfR6SmU=\\n\"\n            \"-----END PUBLIC KEY-----\"\n        )\n        pk = VerifyingKey.from_pem(pub_key_str)\n\n        pk_exp = VerifyingKey.from_string(\n            b\"\\x04\\x8a\\xf5\\x52\\x48\\x18\\xb3\\x98\\xe6\\x6c\\x57\\x3b\\x8a\\xdd\\x7f\"\n            b\"\\x60\\x8d\\x97\\x4f\\xff\\xc8\\x95\\xa1\\x23\\x30\\xd6\\x5f\\xb7\\x5a\\x30\"\n            b\"\\x8e\\xaa\\x41\\x60\\x7d\\x84\\xac\\x91\\xe4\\xe1\\x4e\\x4f\\xa7\\x85\\xaf\"\n            b\"\\x5a\\xad\\x71\\x98\\x7c\\x08\\x66\\x5b\\x07\\xec\\x88\\x38\\x2a\\x67\\x9f\"\n            b\"\\x09\\xf4\\x7a\\x4a\\x65\",\n            curve=NIST256p,\n        )\n        self.assertEqual(pk, pk_exp)\n\n    def test_load_key_with_explicit_with_explicit_disabled(self):\n        pub_key_str = (\n            \"-----BEGIN PUBLIC KEY-----\\n\"\n            \"MIIBSzCCAQMGByqGSM49AgEwgfcCAQEwLAYHKoZIzj0BAQIhAP////8AAAABAAAA\\n\"\n            \"AAAAAAAAAAAA////////////////MFsEIP////8AAAABAAAAAAAAAAAAAAAA////\\n\"\n            \"///////////8BCBaxjXYqjqT57PrvVV2mIa8ZR0GsMxTsPY7zjw+J9JgSwMVAMSd\\n\"\n            \"NgiG5wSTamZ44ROdJreBn36QBEEEaxfR8uEsQkf4vOblY6RA8ncDfYEt6zOg9KE5\\n\"\n            \"RdiYwpZP40Li/hp/m47n60p8D54WK84zV2sxXs7LtkBoN79R9QIhAP////8AAAAA\\n\"\n            \"//////////+85vqtpxeehPO5ysL8YyVRAgEBA0IABIr1UkgYs5jmbFc7it1/YI2X\\n\"\n            \"T//IlaEjMNZft1owjqpBYH2ErJHk4U5Pp4WvWq1xmHwIZlsH7Ig4KmefCfR6SmU=\\n\"\n            \"-----END PUBLIC KEY----",
  "File": ".venv/lib/python3.12/site-packages/ecdsa/test_keys.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 5.396483,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/ecdsa/test_keys.py:private-key:144"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 972,
  "EndLine": 974,
  "StartColumn": 44,
  "EndColumn": 74,
  "Match": "-----BEGIN EC PRIVATE KEY-----\")\n        if private_key_index == -1:\n            private_key_index = string.index(b\"-----BEGIN PRIVATE KEY----",
  "Secret": "-----BEGIN EC PRIVATE KEY-----\")\n        if private_key_index == -1:\n            private_key_index = string.index(b\"-----BEGIN PRIVATE KEY----",
  "File": ".venv/lib/python3.12/site-packages/ecdsa/keys.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 4.5133095,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/ecdsa/keys.py:private-key:972"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 527,
  "EndLine": 566,
  "StartColumn": 15,
  "EndColumn": 40,
  "Match": "-----BEGIN EC PRIVATE KEY-----\\n\"\n            \"MF8CAQEEGF7IQgvW75JSqULpiQQ8op9WH6Uldw6xxaAKBggqhkjOPQMBAaE0AzIA\\n\"\n            \"BLiBd9CE7xf15FY5QIAoNg+fWbSk1yZOYtoGUdzkejWkxbRc9RWTQjqLVXucIJnz\\n\"\n            \"bA==\\n\"\n            \"-----END EC PRIVATE KEY-----\\n\"\n        )\n        cls.sk1 = SigningKey.from_pem(prv_key_str)\n\n        prv_key_str = (\n            \"-----BEGIN PRIVATE KEY-----\\n\"\n            \"MG8CAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQEEVTBTAgEBBBheyEIL1u+SUqlC6YkE\\n\"\n            \"PKKfVh+lJXcOscWhNAMyAAS4gXfQhO8X9eRWOUCAKDYPn1m0pNcmTmLaBlHc5Ho1\\n\"\n            \"pMW0XPUVk0I6i1V7nCCZ82w=\\n\"\n            \"-----END PRIVATE KEY-----\\n\"\n        )\n        cls.sk1_pkcs8 = SigningKey.from_pem(prv_key_str)\n\n        prv_key_str = (\n            \"-----BEGIN EC PRIVATE KEY-----\\n\"\n            \"MHcCAQEEIKlL2EAm5NPPZuXwxRf4nXMk0A80y6UUbiQ17be/qFhRoAoGCCqGSM49\\n\"\n            \"AwEHoUQDQgAE4H3iRbG4TSrsSRb/gusPQB/4YcN8Poqzgjau4kfxBPyZimeRfuY/\\n\"\n            \"9g/wMmPuhGl4BUve51DsnKJFRr8psk0ieA==\\n\"\n            \"-----END EC PRIVATE KEY-----\\n\"\n        )\n        cls.sk2 = SigningKey.from_pem(prv_key_str)\n\n    def test_to_der_pkcs8(self):\n        self.assertEqual(\n            self.sk1.to_der(format=\"pkcs8\"),\n            b\"0o\\x02\\x01\\x010\\x13\\x06\\x07*\\x86H\\xce=\\x02\\x01\\x06\\x08*\\x86H\"\n            b\"\\xce=\\x03\\x01\\x01\\x04U0S\\x02\\x01\\x01\\x04\\x18^\\xc8B\\x0b\\xd6\\xef\"\n            b\"\\x92R\\xa9B\\xe9\\x89\\x04\u003c\\xa2\\x9fV\\x1f\\xa5%w\\x0e\\xb1\\xc5\\xa14\\x03\"\n            b\"2\\x00\\x04\\xb8\\x81w\\xd0\\x84\\xef\\x17\\xf5\\xe4V9@\\x80(6\\x0f\\x9fY\"\n            b\"\\xb4\\xa4\\xd7\u0026Nb\\xda\\x06Q\\xdc\\xe4z5\\xa4\\xc5\\xb4\\\\\\xf5\\x15\\x93B:\"\n            b\"\\x8bU{\\x9c \\x99\\xf3l\",\n        )\n\n    def test_decoding_explicit_curve_parameters(self):\n        prv_key_str = (\n            \"-----BEGIN PRIVATE KEY----",
  "Secret": "-----BEGIN EC PRIVATE KEY-----\\n\"\n            \"MF8CAQEEGF7IQgvW75JSqULpiQQ8op9WH6Uldw6xxaAKBggqhkjOPQMBAaE0AzIA\\n\"\n            \"BLiBd9CE7xf15FY5QIAoNg+fWbSk1yZOYtoGUdzkejWkxbRc9RWTQjqLVXucIJnz\\n\"\n            \"bA==\\n\"\n            \"-----END EC PRIVATE KEY-----\\n\"\n        )\n        cls.sk1 = SigningKey.from_pem(prv_key_str)\n\n        prv_key_str = (\n            \"-----BEGIN PRIVATE KEY-----\\n\"\n            \"MG8CAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQEEVTBTAgEBBBheyEIL1u+SUqlC6YkE\\n\"\n            \"PKKfVh+lJXcOscWhNAMyAAS4gXfQhO8X9eRWOUCAKDYPn1m0pNcmTmLaBlHc5Ho1\\n\"\n            \"pMW0XPUVk0I6i1V7nCCZ82w=\\n\"\n            \"-----END PRIVATE KEY-----\\n\"\n        )\n        cls.sk1_pkcs8 = SigningKey.from_pem(prv_key_str)\n\n        prv_key_str = (\n            \"-----BEGIN EC PRIVATE KEY-----\\n\"\n            \"MHcCAQEEIKlL2EAm5NPPZuXwxRf4nXMk0A80y6UUbiQ17be/qFhRoAoGCCqGSM49\\n\"\n            \"AwEHoUQDQgAE4H3iRbG4TSrsSRb/gusPQB/4YcN8Poqzgjau4kfxBPyZimeRfuY/\\n\"\n            \"9g/wMmPuhGl4BUve51DsnKJFRr8psk0ieA==\\n\"\n            \"-----END EC PRIVATE KEY-----\\n\"\n        )\n        cls.sk2 = SigningKey.from_pem(prv_key_str)\n\n    def test_to_der_pkcs8(self):\n        self.assertEqual(\n            self.sk1.to_der(format=\"pkcs8\"),\n            b\"0o\\x02\\x01\\x010\\x13\\x06\\x07*\\x86H\\xce=\\x02\\x01\\x06\\x08*\\x86H\"\n            b\"\\xce=\\x03\\x01\\x01\\x04U0S\\x02\\x01\\x01\\x04\\x18^\\xc8B\\x0b\\xd6\\xef\"\n            b\"\\x92R\\xa9B\\xe9\\x89\\x04\u003c\\xa2\\x9fV\\x1f\\xa5%w\\x0e\\xb1\\xc5\\xa14\\x03\"\n            b\"2\\x00\\x04\\xb8\\x81w\\xd0\\x84\\xef\\x17\\xf5\\xe4V9@\\x80(6\\x0f\\x9fY\"\n            b\"\\xb4\\xa4\\xd7\u0026Nb\\xda\\x06Q\\xdc\\xe4z5\\xa4\\xc5\\xb4\\\\\\xf5\\x15\\x93B:\"\n            b\"\\x8bU{\\x9c \\x99\\xf3l\",\n        )\n\n    def test_decoding_explicit_curve_parameters(self):\n        prv_key_str = (\n            \"-----BEGIN PRIVATE KEY----",
  "File": ".venv/lib/python3.12/site-packages/ecdsa/test_keys.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 5.313437,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/ecdsa/test_keys.py:private-key:527"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 591,
  "EndLine": 823,
  "StartColumn": 15,
  "EndColumn": 38,
  "Match": "-----BEGIN PRIVATE KEY-----\\n\"\n            \"MIIBeQIBADCCAQMGByqGSM49AgEwgfcCAQEwLAYHKoZIzj0BAQIhAP////8AAAAB\\n\"\n            \"AAAAAAAAAAAAAAAA////////////////MFsEIP////8AAAABAAAAAAAAAAAAAAAA\\n\"\n            \"///////////////8BCBaxjXYqjqT57PrvVV2mIa8ZR0GsMxTsPY7zjw+J9JgSwMV\\n\"\n            \"AMSdNgiG5wSTamZ44ROdJreBn36QBEEEaxfR8uEsQkf4vOblY6RA8ncDfYEt6zOg\\n\"\n            \"9KE5RdiYwpZP40Li/hp/m47n60p8D54WK84zV2sxXs7LtkBoN79R9QIhAP////8A\\n\"\n            \"AAAA//////////+85vqtpxeehPO5ysL8YyVRAgEBBG0wawIBAQQgIXtREfUmR16r\\n\"\n            \"ZbmvDGD2lAEFPZa2DLPyz0czSja58yChRANCAASK9VJIGLOY5mxXO4rdf2CNl0//\\n\"\n            \"yJWhIzDWX7daMI6qQWB9hKyR5OFOT6eFr1qtcZh8CGZbB+yIOCpnnwn0ekpl\\n\"\n            \"-----END PRIVATE KEY-----\\n\"\n        )\n\n        with self.assertRaises(UnexpectedDER):\n            SigningKey.from_pem(\n                prv_key_str, valid_curve_encodings=[\"named_curve\"]\n            )\n\n    def test_equality_on_signing_keys(self):\n        sk = SigningKey.from_secret_exponent(\n            self.sk1.privkey.secret_multiplier, self.sk1.curve\n        )\n        self.assertEqual(self.sk1, sk)\n        self.assertEqual(self.sk1_pkcs8, sk)\n\n    def test_verify_with_empty_message(self):\n        sig = self.sk1.sign(b\"\")\n\n        self.assertTrue(sig)\n\n        vk = self.sk1.verifying_key\n\n        self.assertTrue(vk.verify(sig, b\"\"))\n\n    def test_verify_with_precompute(self):\n        sig = self.sk1.sign(b\"message\")\n\n        vk = self.sk1.verifying_key\n\n        vk.precompute()\n\n        self.assertTrue(vk.verify(sig, b\"message\"))\n\n    def test_compare_verifying_key_with_precompute(self):\n        vk1 = self.sk1.verifying_key\n        vk1.precompute()\n\n        vk2 = self.sk1_pkcs8.verifying_key\n\n        self.assertEqual(vk1, vk2)\n\n    def test_verify_with_lazy_precompute(self):\n        sig = self.sk2.sign(b\"other message\")\n\n        vk = self.sk2.verifying_key\n\n        vk.precompute(lazy=True)\n\n        self.assertTrue(vk.verify(sig, b\"other message\"))\n\n    def test_inequality_on_signing_keys(self):\n        self.assertNotEqual(self.sk1, self.sk2)\n\n    def test_inequality_on_signing_keys_not_implemented(self):\n        self.assertNotEqual(self.sk1, None)\n\n    def test_ed25519_from_pem(self):\n        pem_str = (\n            \"-----BEGIN PRIVATE KEY-----\\n\"\n            \"MC4CAQAwBQYDK2VwBCIEIDS6x9FO1PG8T4xIPg8Zd0z8uL6sVGZFEZrX17gHC/XU\\n\"\n            \"-----END PRIVATE KEY-----\\n\"\n        )\n\n        sk = SigningKey.from_pem(pem_str)\n\n        sk_str = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n\n        self.assertEqual(sk, sk_str)\n\n    def test_ed25519_from_der_bad_alg_id_params(self):\n        der_str = encode_sequence(\n            encode_integer(1),\n            encode_sequence(encode_oid(*Ed25519.oid), encode_integer(1)),\n            encode_octet_string(encode_octet_string(b\"A\" * 32)),\n        )\n\n        with self.assertRaises(UnexpectedDER) as e:\n            SigningKey.from_der(der_str)\n\n        self.assertIn(\"Non NULL parameters\", str(e.exception))\n\n    def test_ed25519_from_der_junk_after_priv_key(self):\n        der_str = encode_sequence(\n            encode_integer(1),\n            encode_sequence(\n                encode_oid(*Ed25519.oid),\n            ),\n            encode_octet_string(encode_octet_string(b\"A\" * 32) + b\"B\"),\n        )\n\n        with self.assertRaises(UnexpectedDER) as e:\n            SigningKey.from_der(der_str)\n\n        self.assertIn(\n            \"trailing junk after the encoded private key\", str(e.exception)\n        )\n\n    def test_ed25519_sign(self):\n        sk_str = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n\n        msg = b\"message\"\n\n        sig = sk_str.sign(msg, sigencode=sigencode_der)\n\n        self.assertEqual(\n            sig,\n            b\"\\xe1,v\\xc9\u003e%\\xda\\xd2~\u003e\\xc3\u0026\\na\\xf4@|\\x9e`X\\x11\\x13@\u003c\\x987\\xd4\"\n            b\"\\r\\xb1\\xf5\\xb3\\x15\\x7f%i{\\xdf}\\xdd\\xb1\\xf3\\x02\\x7f\\x80\\x02\\xc2\"\n            b'|\\xe5\\xd6\\x06\\xc4\\n\\xa3\\xb0\\xf6}\\xc0\\xed)\"+E\\xaf\\x00',\n        )\n\n    def test_ed25519_sign_digest_deterministic(self):\n        sk_str = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n        with self.assertRaises(ValueError) as e:\n            sk_str.sign_digest_deterministic(b\"a\" * 20)\n\n        self.assertIn(\"Method unsupported for Edwards\", str(e.exception))\n\n    def test_ed25519_sign_digest(self):\n        sk_str = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n        with self.assertRaises(ValueError) as e:\n            sk_str.sign_digest(b\"a\" * 20)\n\n        self.assertIn(\"Method unsupported for Edwards\", str(e.exception))\n\n    def test_ed25519_sign_number(self):\n        sk_str = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n        with self.assertRaises(ValueError) as e:\n            sk_str.sign_number(20)\n\n        self.assertIn(\"Method unsupported for Edwards\", str(e.exception))\n\n    def test_ed25519_to_der_ssleay(self):\n        pem_str = (\n            \"-----BEGIN PRIVATE KEY-----\\n\"\n            \"MC4CAQAwBQYDK2VwBCIEIDS6x9FO1PG8T4xIPg8Zd0z8uL6sVGZFEZrX17gHC/XU\\n\"\n            \"-----END PRIVATE KEY-----\\n\"\n        )\n\n        sk = SigningKey.from_pem(pem_str)\n\n        with self.assertRaises(ValueError) as e:\n            sk.to_der(format=\"ssleay\")\n\n        self.assertIn(\"Only PKCS#8 format\", str(e.exception))\n\n    def test_ed25519_to_pem(self):\n        sk = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n\n        pem_str = (\n            b\"-----BEGIN PRIVATE KEY-----\\n\"\n            b\"MC4CAQAwBQYDK2VwBCIEIDS6x9FO1PG8T4xIPg8Zd0z8uL6sVGZFEZrX17gHC/XU\\n\"\n            b\"-----END PRIVATE KEY-----\\n\"\n        )\n\n        self.assertEqual(sk.to_pem(format=\"pkcs8\"), pem_str)\n\n    def test_ed25519_to_ssh(self):\n        sk = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n\n        ssh_str = (\n            b\"-----BEGIN OPENSSH PRIVATE KEY-----\\n\"\n            b\"b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZWQyNTUx\\n\"\n            b\"OQAAACAjAFDQ1mQiKI7jVYl+bkFXja7eRCbuVie8heYLLyrLZQAAAIgAAAAAAAAAAAAAAAtzc2gt\\n\"\n            b\"ZWQyNTUxOQAAACAjAFDQ1mQiKI7jVYl+bkFXja7eRCbuVie8heYLLyrLZQAAAEA0usfRTtTxvE+M\\n\"\n            b\"SD4PGXdM/Li+rFRmRRGa19e4Bwv11CMAUNDWZCIojuNViX5uQVeNrt5EJu5WJ7yF5gsvKstlAAAA\\n\"\n            b\"AAECAwQF\\n\"\n            b\"-----END OPENSSH PRIVATE KEY-----\\n\"\n        )\n\n        self.assertEqual(sk.to_ssh(), ssh_str)\n\n    def test_ed25519_to_and_from_pem(self):\n        sk = SigningKey.generate(Ed25519)\n\n        decoded = SigningKey.from_pem(sk.to_pem(format=\"pkcs8\"))\n\n        self.assertEqual(sk, decoded)\n\n    def test_ed25519_custom_entropy(self):\n        sk = SigningKey.generate(Ed25519, entropy=os.urandom)\n\n        self.assertIsNotNone(sk)\n\n    def test_ed25519_from_secret_exponent(self):\n        with self.assertRaises(ValueError) as e:\n            SigningKey.from_secret_exponent(1234567890, curve=Ed25519)\n\n        self.assertIn(\"don't support setting the secret\", str(e.exception))\n\n    def test_ed448_from_pem(self):\n        pem_str = (\n            \"-----BEGIN PRIVATE KEY-----\\n\"\n            \"MEcCAQAwBQYDK2VxBDsEOTyFuXqFLXgJlV8uDqcOw9nG4IqzLiZ/i5NfBDoHPzmP\\n\"\n            \"OP0JMYaLGlTzwovmvCDJ2zLaezu9NLz9aQ==\\n\"\n            \"-----END PRIVATE KEY----",
  "Secret": "-----BEGIN PRIVATE KEY-----\\n\"\n            \"MIIBeQIBADCCAQMGByqGSM49AgEwgfcCAQEwLAYHKoZIzj0BAQIhAP////8AAAAB\\n\"\n            \"AAAAAAAAAAAAAAAA////////////////MFsEIP////8AAAABAAAAAAAAAAAAAAAA\\n\"\n            \"///////////////8BCBaxjXYqjqT57PrvVV2mIa8ZR0GsMxTsPY7zjw+J9JgSwMV\\n\"\n            \"AMSdNgiG5wSTamZ44ROdJreBn36QBEEEaxfR8uEsQkf4vOblY6RA8ncDfYEt6zOg\\n\"\n            \"9KE5RdiYwpZP40Li/hp/m47n60p8D54WK84zV2sxXs7LtkBoN79R9QIhAP////8A\\n\"\n            \"AAAA//////////+85vqtpxeehPO5ysL8YyVRAgEBBG0wawIBAQQgIXtREfUmR16r\\n\"\n            \"ZbmvDGD2lAEFPZa2DLPyz0czSja58yChRANCAASK9VJIGLOY5mxXO4rdf2CNl0//\\n\"\n            \"yJWhIzDWX7daMI6qQWB9hKyR5OFOT6eFr1qtcZh8CGZbB+yIOCpnnwn0ekpl\\n\"\n            \"-----END PRIVATE KEY-----\\n\"\n        )\n\n        with self.assertRaises(UnexpectedDER):\n            SigningKey.from_pem(\n                prv_key_str, valid_curve_encodings=[\"named_curve\"]\n            )\n\n    def test_equality_on_signing_keys(self):\n        sk = SigningKey.from_secret_exponent(\n            self.sk1.privkey.secret_multiplier, self.sk1.curve\n        )\n        self.assertEqual(self.sk1, sk)\n        self.assertEqual(self.sk1_pkcs8, sk)\n\n    def test_verify_with_empty_message(self):\n        sig = self.sk1.sign(b\"\")\n\n        self.assertTrue(sig)\n\n        vk = self.sk1.verifying_key\n\n        self.assertTrue(vk.verify(sig, b\"\"))\n\n    def test_verify_with_precompute(self):\n        sig = self.sk1.sign(b\"message\")\n\n        vk = self.sk1.verifying_key\n\n        vk.precompute()\n\n        self.assertTrue(vk.verify(sig, b\"message\"))\n\n    def test_compare_verifying_key_with_precompute(self):\n        vk1 = self.sk1.verifying_key\n        vk1.precompute()\n\n        vk2 = self.sk1_pkcs8.verifying_key\n\n        self.assertEqual(vk1, vk2)\n\n    def test_verify_with_lazy_precompute(self):\n        sig = self.sk2.sign(b\"other message\")\n\n        vk = self.sk2.verifying_key\n\n        vk.precompute(lazy=True)\n\n        self.assertTrue(vk.verify(sig, b\"other message\"))\n\n    def test_inequality_on_signing_keys(self):\n        self.assertNotEqual(self.sk1, self.sk2)\n\n    def test_inequality_on_signing_keys_not_implemented(self):\n        self.assertNotEqual(self.sk1, None)\n\n    def test_ed25519_from_pem(self):\n        pem_str = (\n            \"-----BEGIN PRIVATE KEY-----\\n\"\n            \"MC4CAQAwBQYDK2VwBCIEIDS6x9FO1PG8T4xIPg8Zd0z8uL6sVGZFEZrX17gHC/XU\\n\"\n            \"-----END PRIVATE KEY-----\\n\"\n        )\n\n        sk = SigningKey.from_pem(pem_str)\n\n        sk_str = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n\n        self.assertEqual(sk, sk_str)\n\n    def test_ed25519_from_der_bad_alg_id_params(self):\n        der_str = encode_sequence(\n            encode_integer(1),\n            encode_sequence(encode_oid(*Ed25519.oid), encode_integer(1)),\n            encode_octet_string(encode_octet_string(b\"A\" * 32)),\n        )\n\n        with self.assertRaises(UnexpectedDER) as e:\n            SigningKey.from_der(der_str)\n\n        self.assertIn(\"Non NULL parameters\", str(e.exception))\n\n    def test_ed25519_from_der_junk_after_priv_key(self):\n        der_str = encode_sequence(\n            encode_integer(1),\n            encode_sequence(\n                encode_oid(*Ed25519.oid),\n            ),\n            encode_octet_string(encode_octet_string(b\"A\" * 32) + b\"B\"),\n        )\n\n        with self.assertRaises(UnexpectedDER) as e:\n            SigningKey.from_der(der_str)\n\n        self.assertIn(\n            \"trailing junk after the encoded private key\", str(e.exception)\n        )\n\n    def test_ed25519_sign(self):\n        sk_str = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n\n        msg = b\"message\"\n\n        sig = sk_str.sign(msg, sigencode=sigencode_der)\n\n        self.assertEqual(\n            sig,\n            b\"\\xe1,v\\xc9\u003e%\\xda\\xd2~\u003e\\xc3\u0026\\na\\xf4@|\\x9e`X\\x11\\x13@\u003c\\x987\\xd4\"\n            b\"\\r\\xb1\\xf5\\xb3\\x15\\x7f%i{\\xdf}\\xdd\\xb1\\xf3\\x02\\x7f\\x80\\x02\\xc2\"\n            b'|\\xe5\\xd6\\x06\\xc4\\n\\xa3\\xb0\\xf6}\\xc0\\xed)\"+E\\xaf\\x00',\n        )\n\n    def test_ed25519_sign_digest_deterministic(self):\n        sk_str = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n        with self.assertRaises(ValueError) as e:\n            sk_str.sign_digest_deterministic(b\"a\" * 20)\n\n        self.assertIn(\"Method unsupported for Edwards\", str(e.exception))\n\n    def test_ed25519_sign_digest(self):\n        sk_str = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n        with self.assertRaises(ValueError) as e:\n            sk_str.sign_digest(b\"a\" * 20)\n\n        self.assertIn(\"Method unsupported for Edwards\", str(e.exception))\n\n    def test_ed25519_sign_number(self):\n        sk_str = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n        with self.assertRaises(ValueError) as e:\n            sk_str.sign_number(20)\n\n        self.assertIn(\"Method unsupported for Edwards\", str(e.exception))\n\n    def test_ed25519_to_der_ssleay(self):\n        pem_str = (\n            \"-----BEGIN PRIVATE KEY-----\\n\"\n            \"MC4CAQAwBQYDK2VwBCIEIDS6x9FO1PG8T4xIPg8Zd0z8uL6sVGZFEZrX17gHC/XU\\n\"\n            \"-----END PRIVATE KEY-----\\n\"\n        )\n\n        sk = SigningKey.from_pem(pem_str)\n\n        with self.assertRaises(ValueError) as e:\n            sk.to_der(format=\"ssleay\")\n\n        self.assertIn(\"Only PKCS#8 format\", str(e.exception))\n\n    def test_ed25519_to_pem(self):\n        sk = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n\n        pem_str = (\n            b\"-----BEGIN PRIVATE KEY-----\\n\"\n            b\"MC4CAQAwBQYDK2VwBCIEIDS6x9FO1PG8T4xIPg8Zd0z8uL6sVGZFEZrX17gHC/XU\\n\"\n            b\"-----END PRIVATE KEY-----\\n\"\n        )\n\n        self.assertEqual(sk.to_pem(format=\"pkcs8\"), pem_str)\n\n    def test_ed25519_to_ssh(self):\n        sk = SigningKey.from_string(\n            b\"\\x34\\xBA\\xC7\\xD1\\x4E\\xD4\\xF1\\xBC\\x4F\\x8C\\x48\\x3E\\x0F\\x19\\x77\\x4C\"\n            b\"\\xFC\\xB8\\xBE\\xAC\\x54\\x66\\x45\\x11\\x9A\\xD7\\xD7\\xB8\\x07\\x0B\\xF5\\xD4\",\n            Ed25519,\n        )\n\n        ssh_str = (\n            b\"-----BEGIN OPENSSH PRIVATE KEY-----\\n\"\n            b\"b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZWQyNTUx\\n\"\n            b\"OQAAACAjAFDQ1mQiKI7jVYl+bkFXja7eRCbuVie8heYLLyrLZQAAAIgAAAAAAAAAAAAAAAtzc2gt\\n\"\n            b\"ZWQyNTUxOQAAACAjAFDQ1mQiKI7jVYl+bkFXja7eRCbuVie8heYLLyrLZQAAAEA0usfRTtTxvE+M\\n\"\n            b\"SD4PGXdM/Li+rFRmRRGa19e4Bwv11CMAUNDWZCIojuNViX5uQVeNrt5EJu5WJ7yF5gsvKstlAAAA\\n\"\n            b\"AAECAwQF\\n\"\n            b\"-----END OPENSSH PRIVATE KEY-----\\n\"\n        )\n\n        self.assertEqual(sk.to_ssh(), ssh_str)\n\n    def test_ed25519_to_and_from_pem(self):\n        sk = SigningKey.generate(Ed25519)\n\n        decoded = SigningKey.from_pem(sk.to_pem(format=\"pkcs8\"))\n\n        self.assertEqual(sk, decoded)\n\n    def test_ed25519_custom_entropy(self):\n        sk = SigningKey.generate(Ed25519, entropy=os.urandom)\n\n        self.assertIsNotNone(sk)\n\n    def test_ed25519_from_secret_exponent(self):\n        with self.assertRaises(ValueError) as e:\n            SigningKey.from_secret_exponent(1234567890, curve=Ed25519)\n\n        self.assertIn(\"don't support setting the secret\", str(e.exception))\n\n    def test_ed448_from_pem(self):\n        pem_str = (\n            \"-----BEGIN PRIVATE KEY-----\\n\"\n            \"MEcCAQAwBQYDK2VxBDsEOTyFuXqFLXgJlV8uDqcOw9nG4IqzLiZ/i5NfBDoHPzmP\\n\"\n            \"OP0JMYaLGlTzwovmvCDJ2zLaezu9NLz9aQ==\\n\"\n            \"-----END PRIVATE KEY----",
  "File": ".venv/lib/python3.12/site-packages/ecdsa/test_keys.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 5.237436,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/ecdsa/test_keys.py:private-key:591"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 245,
  "EndLine": 273,
  "StartColumn": 42,
  "EndColumn": 74,
  "Match": "-----BEGIN EC PRIVATE KEY-----\"))\n        self.assertTrue(s1.strip().endswith(b\"-----END EC PRIVATE KEY-----\"))\n        priv2 = SigningKey.from_pem(s1)\n        self.assertTruePrivkeysEqual(priv1, priv2)\n\n        s1 = priv1.to_der()\n        self.assertEqual(type(s1), binary_type)\n        priv2 = SigningKey.from_der(s1)\n        self.assertTruePrivkeysEqual(priv1, priv2)\n\n        priv1 = SigningKey.generate(curve=NIST256p)\n        s1 = priv1.to_pem()\n        self.assertEqual(type(s1), binary_type)\n        self.assertTrue(s1.startswith(b\"-----BEGIN EC PRIVATE KEY-----\"))\n        self.assertTrue(s1.strip().endswith(b\"-----END EC PRIVATE KEY-----\"))\n        priv2 = SigningKey.from_pem(s1)\n        self.assertTruePrivkeysEqual(priv1, priv2)\n\n        s1 = priv1.to_der()\n        self.assertEqual(type(s1), binary_type)\n        priv2 = SigningKey.from_der(s1)\n        self.assertTruePrivkeysEqual(priv1, priv2)\n\n    def test_privkey_strings_brainpool(self):\n        priv1 = SigningKey.generate(curve=BRAINPOOLP512r1)\n        s1 = priv1.to_pem()\n        self.assertEqual(type(s1), binary_type)\n        self.assertTrue(s1.startswith(b\"-----BEGIN EC PRIVATE KEY-----\"))\n        self.assertTrue(s1.strip().endswith(b\"-----END EC PRIVATE KEY----",
  "Secret": "-----BEGIN EC PRIVATE KEY-----\"))\n        self.assertTrue(s1.strip().endswith(b\"-----END EC PRIVATE KEY-----\"))\n        priv2 = SigningKey.from_pem(s1)\n        self.assertTruePrivkeysEqual(priv1, priv2)\n\n        s1 = priv1.to_der()\n        self.assertEqual(type(s1), binary_type)\n        priv2 = SigningKey.from_der(s1)\n        self.assertTruePrivkeysEqual(priv1, priv2)\n\n        priv1 = SigningKey.generate(curve=NIST256p)\n        s1 = priv1.to_pem()\n        self.assertEqual(type(s1), binary_type)\n        self.assertTrue(s1.startswith(b\"-----BEGIN EC PRIVATE KEY-----\"))\n        self.assertTrue(s1.strip().endswith(b\"-----END EC PRIVATE KEY-----\"))\n        priv2 = SigningKey.from_pem(s1)\n        self.assertTruePrivkeysEqual(priv1, priv2)\n\n        s1 = priv1.to_der()\n        self.assertEqual(type(s1), binary_type)\n        priv2 = SigningKey.from_der(s1)\n        self.assertTruePrivkeysEqual(priv1, priv2)\n\n    def test_privkey_strings_brainpool(self):\n        priv1 = SigningKey.generate(curve=BRAINPOOLP512r1)\n        s1 = priv1.to_pem()\n        self.assertEqual(type(s1), binary_type)\n        self.assertTrue(s1.startswith(b\"-----BEGIN EC PRIVATE KEY-----\"))\n        self.assertTrue(s1.strip().endswith(b\"-----END EC PRIVATE KEY----",
  "File": ".venv/lib/python3.12/site-packages/ecdsa/test_pyecdsa.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 4.8690486,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/ecdsa/test_pyecdsa.py:private-key:245"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 846,
  "EndLine": 1135,
  "StartColumn": 16,
  "EndColumn": 29,
  "Match": "-----BEGIN PRIVATE KEY-----\\n\"\n            b\"MEcCAQAwBQYDK2VxBDsEOTyFuXqFLXgJlV8uDqcOw9nG4IqzLiZ/i5NfBDoHPzmPOP0JMYaLGlTz\\n\"\n            b\"wovmvCDJ2zLaezu9NLz9aQ==\\n\"\n            b\"-----END PRIVATE KEY-----\\n\"\n        )\n\n        self.assertEqual(sk.to_pem(format=\"pkcs8\"), pem_str)\n\n    def test_ed448_encode_decode(self):\n        sk = SigningKey.generate(Ed448)\n\n        decoded = SigningKey.from_pem(sk.to_pem(format=\"pkcs8\"))\n\n        self.assertEqual(decoded, sk)\n\n\nclass TestTrivialCurve(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        # To test what happens with r or s in signing happens to be zero we\n        # need to find a scalar that creates one of the points on a curve that\n        # has x coordinate equal to zero.\n        # Even for secp112r2 curve that's non trivial so use this toy\n        # curve, for which we can iterate over all points quickly\n        curve = CurveFp(163, 84, 58)\n        gen = PointJacobi(curve, 2, 87, 1, 167, generator=True)\n\n        cls.toy_curve = Curve(\"toy_p8\", curve, gen, (1, 2, 0))\n\n        cls.sk = SigningKey.from_secret_exponent(\n            140,\n            cls.toy_curve,\n            hashfunc=hashlib.sha1,\n        )\n\n    def test_generator_sanity(self):\n        gen = self.toy_curve.generator\n\n        self.assertEqual(gen * gen.order(), INFINITY)\n\n    def test_public_key_sanity(self):\n        self.assertEqual(self.sk.verifying_key.to_string(), b\"\\x98\\x1e\")\n\n    def test_deterministic_sign(self):\n        sig = self.sk.sign_deterministic(b\"message\")\n\n        self.assertEqual(sig, b\"-.\")\n\n        self.assertTrue(self.sk.verifying_key.verify(sig, b\"message\"))\n\n    def test_deterministic_sign_random_message(self):\n        msg = os.urandom(32)\n        sig = self.sk.sign_deterministic(msg)\n        self.assertEqual(len(sig), 2)\n        self.assertTrue(self.sk.verifying_key.verify(sig, msg))\n\n    def test_deterministic_sign_that_rises_R_zero_error(self):\n        # the raised RSZeroError is caught and handled internally by\n        # sign_deterministic methods\n        msg = b\"\\x00\\x4f\"\n        sig = self.sk.sign_deterministic(msg)\n        self.assertEqual(sig, b\"\\x36\\x9e\")\n        self.assertTrue(self.sk.verifying_key.verify(sig, msg))\n\n    def test_deterministic_sign_that_rises_S_zero_error(self):\n        msg = b\"\\x01\\x6d\"\n        sig = self.sk.sign_deterministic(msg)\n        self.assertEqual(sig, b\"\\x49\\x6c\")\n        self.assertTrue(self.sk.verifying_key.verify(sig, msg))\n\n\n# test VerifyingKey.verify()\nprv_key_str = (\n    \"-----BEGIN EC PRIVATE KEY-----\\n\"\n    \"MF8CAQEEGF7IQgvW75JSqULpiQQ8op9WH6Uldw6xxaAKBggqhkjOPQMBAaE0AzIA\\n\"\n    \"BLiBd9CE7xf15FY5QIAoNg+fWbSk1yZOYtoGUdzkejWkxbRc9RWTQjqLVXucIJnz\\n\"\n    \"bA==\\n\"\n    \"-----END EC PRIVATE KEY-----\\n\"\n)\nkey_bytes = unpem(prv_key_str)\nassert isinstance(key_bytes, bytes)\nsk = SigningKey.from_der(key_bytes)\nvk = sk.verifying_key\n\ndata = (\n    b\"some string for signing\"\n    b\"contents don't really matter\"\n    b\"but do include also some crazy values: \"\n    b\"\\x00\\x01\\t\\r\\n\\x00\\x00\\x00\\xff\\xf0\"\n)\nassert len(data) % 4 == 0\nsha1 = hashlib.sha1()\nsha1.update(data)\ndata_hash = sha1.digest()\nassert isinstance(data_hash, bytes)\nsig_raw = sk.sign(data, sigencode=sigencode_string)\nassert isinstance(sig_raw, bytes)\nsig_der = sk.sign(data, sigencode=sigencode_der)\nassert isinstance(sig_der, bytes)\nsig_strings = sk.sign(data, sigencode=sigencode_strings)\nassert isinstance(sig_strings[0], bytes)\n\nverifiers = []\nfor modifier, fun in [\n    (\"bytes\", lambda x: x),\n    (\"bytes memoryview\", buffer),\n    (\"bytearray\", bytearray),\n    (\"bytearray memoryview\", lambda x: buffer(bytearray(x))),\n    (\"array.array of bytes\", lambda x: array.array(\"B\", x)),\n    (\"array.array of bytes memoryview\", lambda x: buffer(array.array(\"B\", x))),\n    (\"array.array of ints\", lambda x: array.array(\"I\", x)),\n    (\"array.array of ints memoryview\", lambda x: buffer(array.array(\"I\", x))),\n]:\n    if \"ints\" in modifier:\n        conv = lambda x: x\n    else:\n        conv = fun\n    for sig_format, signature, decoder, mod_apply in [\n        (\"raw\", sig_raw, sigdecode_string, lambda x: conv(x)),\n        (\"der\", sig_der, sigdecode_der, lambda x: conv(x)),\n        (\n            \"strings\",\n            sig_strings,\n            sigdecode_strings,\n            lambda x: tuple(conv(i) for i in x),\n        ),\n    ]:\n        for method_name, vrf_mthd, vrf_data in [\n            (\"verify\", vk.verify, data),\n            (\"verify_digest\", vk.verify_digest, data_hash),\n        ]:\n            verifiers.append(\n                pytest.param(\n                    signature,\n                    decoder,\n                    mod_apply,\n                    fun,\n                    vrf_mthd,\n                    vrf_data,\n                    id=\"{2}-{0}-{1}\".format(modifier, sig_format, method_name),\n                )\n            )\n\n\n@pytest.mark.parametrize(\n    \"signature,decoder,mod_apply,fun,vrf_mthd,vrf_data\", verifiers\n)\ndef test_VerifyingKey_verify(\n    signature, decoder, mod_apply, fun, vrf_mthd, vrf_data\n):\n    sig = mod_apply(signature)\n\n    assert vrf_mthd(sig, fun(vrf_data), sigdecode=decoder)\n\n\n# test SigningKey.from_string()\nprv_key_bytes = (\n    b\"^\\xc8B\\x0b\\xd6\\xef\\x92R\\xa9B\\xe9\\x89\\x04\u003c\\xa2\"\n    b\"\\x9fV\\x1f\\xa5%w\\x0e\\xb1\\xc5\"\n)\nassert len(prv_key_bytes) == 24\nconverters = []\nfor modifier, convert in [\n    (\"bytes\", lambda x: x),\n    (\"bytes memoryview\", buffer),\n    (\"bytearray\", bytearray),\n    (\"bytearray memoryview\", lambda x: buffer(bytearray(x))),\n    (\"array.array of bytes\", lambda x: array.array(\"B\", x)),\n    (\"array.array of bytes memoryview\", lambda x: buffer(array.array(\"B\", x))),\n    (\"array.array of ints\", lambda x: array.array(\"I\", x)),\n    (\"array.array of ints memoryview\", lambda x: buffer(array.array(\"I\", x))),\n]:\n    converters.append(pytest.param(convert, id=modifier))\n\n\n@pytest.mark.parametrize(\"convert\", converters)\ndef test_SigningKey_from_string(convert):\n    key = convert(prv_key_bytes)\n    sk = SigningKey.from_string(key)\n\n    assert sk.to_string() == prv_key_bytes\n\n\n# test SigningKey.from_der()\nprv_key_str = (\n    \"-----BEGIN EC PRIVATE KEY-----\\n\"\n    \"MF8CAQEEGF7IQgvW75JSqULpiQQ8op9WH6Uldw6xxaAKBggqhkjOPQMBAaE0AzIA\\n\"\n    \"BLiBd9CE7xf15FY5QIAoNg+fWbSk1yZOYtoGUdzkejWkxbRc9RWTQjqLVXucIJnz\\n\"\n    \"bA==\\n\"\n    \"-----END EC PRIVATE KEY-----\\n\"\n)\nkey_bytes = unpem(prv_key_str)\nassert isinstance(key_bytes, bytes)\n\n# last two converters are for array.array of ints, those require input\n# that's multiple of 4, which no curve we support produces\n@pytest.mark.parametrize(\"convert\", converters[:-2])\ndef test_SigningKey_from_der(convert):\n    key = convert(key_bytes)\n    sk = SigningKey.from_der(key)\n\n    assert sk.to_string() == prv_key_bytes\n\n\n# test SigningKey.sign_deterministic()\nextra_entropy = b\"\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\"\n\n\n@pytest.mark.parametrize(\"convert\", converters)\ndef test_SigningKey_sign_deterministic(convert):\n    sig = sk.sign_deterministic(\n        convert(data), extra_entropy=convert(extra_entropy)\n    )\n\n    vk.verify(sig, data)\n\n\n# test SigningKey.sign_digest_deterministic()\n@pytest.mark.parametrize(\"convert\", converters)\ndef test_SigningKey_sign_digest_deterministic(convert):\n    sig = sk.sign_digest_deterministic(\n        convert(data_hash), extra_entropy=convert(extra_entropy)\n    )\n\n    vk.verify(sig, data)\n\n\n@pytest.mark.parametrize(\"convert\", converters)\ndef test_SigningKey_sign(convert):\n    sig = sk.sign(convert(data))\n\n    vk.verify(sig, data)\n\n\n@pytest.mark.parametrize(\"convert\", converters)\ndef test_SigningKey_sign_digest(convert):\n    sig = sk.sign_digest(convert(data_hash))\n\n    vk.verify(sig, data)\n\n\ndef test_SigningKey_with_unlikely_value():\n    sk = SigningKey.from_secret_exponent(NIST256p.order - 1, curve=NIST256p)\n    vk = sk.verifying_key\n    sig = sk.sign(b\"hello\")\n    assert vk.verify(sig, b\"hello\")\n\n\ndef test_SigningKey_with_custom_curve_old_point():\n    generator = generator_brainpoolp160r1\n    generator = Point(\n        generator.curve(),\n        generator.x(),\n        generator.y(),\n        generator.order(),\n    )\n\n    curve = Curve(\n        \"BRAINPOOLP160r1\",\n        generator.curve(),\n        generator,\n        (1, 3, 36, 3, 3, 2, 8, 1, 1, 1),\n    )\n\n    sk = SigningKey.from_secret_exponent(12, curve)\n\n    sk2 = SigningKey.from_secret_exponent(12, BRAINPOOLP160r1)\n\n    assert sk.privkey == sk2.privkey\n\n\ndef test_VerifyingKey_inequality_with_different_curves():\n    sk1 = SigningKey.from_secret_exponent(2, BRAINPOOLP160r1)\n    sk2 = SigningKey.from_secret_exponent(2, NIST256p)\n\n    assert not (sk1.verifying_key == sk2.verifying_key)\n\n\ndef test_VerifyingKey_inequality_with_different_secret_points():\n    sk1 = SigningKey.from_secret_exponent(2, BRAINPOOLP160r1)\n    sk2 = SigningKey.from_secret_exponent(3, BRAINPOOLP160r1)\n\n    assert not (sk1.verifying_key == sk2.verifying_key)\n\n\ndef test_SigningKey_from_pem_pkcs8v2_EdDSA():\n    pem = \"\"\"-----BEGIN PRIVATE KEY-----\n    MFMCAQEwBQYDK2VwBCIEICc2F2ag1n1QP0jY+g9qWx5sDkx0s/HdNi3cSRHw+zsI\n    oSMDIQA+HQ2xCif8a/LMWR2m5HaCm5I2pKe/cc8OiRANMHxjKQ==\n    -----END PRIVATE KEY----",
  "Secret": "-----BEGIN PRIVATE KEY-----\\n\"\n            b\"MEcCAQAwBQYDK2VxBDsEOTyFuXqFLXgJlV8uDqcOw9nG4IqzLiZ/i5NfBDoHPzmPOP0JMYaLGlTz\\n\"\n            b\"wovmvCDJ2zLaezu9NLz9aQ==\\n\"\n            b\"-----END PRIVATE KEY-----\\n\"\n        )\n\n        self.assertEqual(sk.to_pem(format=\"pkcs8\"), pem_str)\n\n    def test_ed448_encode_decode(self):\n        sk = SigningKey.generate(Ed448)\n\n        decoded = SigningKey.from_pem(sk.to_pem(format=\"pkcs8\"))\n\n        self.assertEqual(decoded, sk)\n\n\nclass TestTrivialCurve(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        # To test what happens with r or s in signing happens to be zero we\n        # need to find a scalar that creates one of the points on a curve that\n        # has x coordinate equal to zero.\n        # Even for secp112r2 curve that's non trivial so use this toy\n        # curve, for which we can iterate over all points quickly\n        curve = CurveFp(163, 84, 58)\n        gen = PointJacobi(curve, 2, 87, 1, 167, generator=True)\n\n        cls.toy_curve = Curve(\"toy_p8\", curve, gen, (1, 2, 0))\n\n        cls.sk = SigningKey.from_secret_exponent(\n            140,\n            cls.toy_curve,\n            hashfunc=hashlib.sha1,\n        )\n\n    def test_generator_sanity(self):\n        gen = self.toy_curve.generator\n\n        self.assertEqual(gen * gen.order(), INFINITY)\n\n    def test_public_key_sanity(self):\n        self.assertEqual(self.sk.verifying_key.to_string(), b\"\\x98\\x1e\")\n\n    def test_deterministic_sign(self):\n        sig = self.sk.sign_deterministic(b\"message\")\n\n        self.assertEqual(sig, b\"-.\")\n\n        self.assertTrue(self.sk.verifying_key.verify(sig, b\"message\"))\n\n    def test_deterministic_sign_random_message(self):\n        msg = os.urandom(32)\n        sig = self.sk.sign_deterministic(msg)\n        self.assertEqual(len(sig), 2)\n        self.assertTrue(self.sk.verifying_key.verify(sig, msg))\n\n    def test_deterministic_sign_that_rises_R_zero_error(self):\n        # the raised RSZeroError is caught and handled internally by\n        # sign_deterministic methods\n        msg = b\"\\x00\\x4f\"\n        sig = self.sk.sign_deterministic(msg)\n        self.assertEqual(sig, b\"\\x36\\x9e\")\n        self.assertTrue(self.sk.verifying_key.verify(sig, msg))\n\n    def test_deterministic_sign_that_rises_S_zero_error(self):\n        msg = b\"\\x01\\x6d\"\n        sig = self.sk.sign_deterministic(msg)\n        self.assertEqual(sig, b\"\\x49\\x6c\")\n        self.assertTrue(self.sk.verifying_key.verify(sig, msg))\n\n\n# test VerifyingKey.verify()\nprv_key_str = (\n    \"-----BEGIN EC PRIVATE KEY-----\\n\"\n    \"MF8CAQEEGF7IQgvW75JSqULpiQQ8op9WH6Uldw6xxaAKBggqhkjOPQMBAaE0AzIA\\n\"\n    \"BLiBd9CE7xf15FY5QIAoNg+fWbSk1yZOYtoGUdzkejWkxbRc9RWTQjqLVXucIJnz\\n\"\n    \"bA==\\n\"\n    \"-----END EC PRIVATE KEY-----\\n\"\n)\nkey_bytes = unpem(prv_key_str)\nassert isinstance(key_bytes, bytes)\nsk = SigningKey.from_der(key_bytes)\nvk = sk.verifying_key\n\ndata = (\n    b\"some string for signing\"\n    b\"contents don't really matter\"\n    b\"but do include also some crazy values: \"\n    b\"\\x00\\x01\\t\\r\\n\\x00\\x00\\x00\\xff\\xf0\"\n)\nassert len(data) % 4 == 0\nsha1 = hashlib.sha1()\nsha1.update(data)\ndata_hash = sha1.digest()\nassert isinstance(data_hash, bytes)\nsig_raw = sk.sign(data, sigencode=sigencode_string)\nassert isinstance(sig_raw, bytes)\nsig_der = sk.sign(data, sigencode=sigencode_der)\nassert isinstance(sig_der, bytes)\nsig_strings = sk.sign(data, sigencode=sigencode_strings)\nassert isinstance(sig_strings[0], bytes)\n\nverifiers = []\nfor modifier, fun in [\n    (\"bytes\", lambda x: x),\n    (\"bytes memoryview\", buffer),\n    (\"bytearray\", bytearray),\n    (\"bytearray memoryview\", lambda x: buffer(bytearray(x))),\n    (\"array.array of bytes\", lambda x: array.array(\"B\", x)),\n    (\"array.array of bytes memoryview\", lambda x: buffer(array.array(\"B\", x))),\n    (\"array.array of ints\", lambda x: array.array(\"I\", x)),\n    (\"array.array of ints memoryview\", lambda x: buffer(array.array(\"I\", x))),\n]:\n    if \"ints\" in modifier:\n        conv = lambda x: x\n    else:\n        conv = fun\n    for sig_format, signature, decoder, mod_apply in [\n        (\"raw\", sig_raw, sigdecode_string, lambda x: conv(x)),\n        (\"der\", sig_der, sigdecode_der, lambda x: conv(x)),\n        (\n            \"strings\",\n            sig_strings,\n            sigdecode_strings,\n            lambda x: tuple(conv(i) for i in x),\n        ),\n    ]:\n        for method_name, vrf_mthd, vrf_data in [\n            (\"verify\", vk.verify, data),\n            (\"verify_digest\", vk.verify_digest, data_hash),\n        ]:\n            verifiers.append(\n                pytest.param(\n                    signature,\n                    decoder,\n                    mod_apply,\n                    fun,\n                    vrf_mthd,\n                    vrf_data,\n                    id=\"{2}-{0}-{1}\".format(modifier, sig_format, method_name),\n                )\n            )\n\n\n@pytest.mark.parametrize(\n    \"signature,decoder,mod_apply,fun,vrf_mthd,vrf_data\", verifiers\n)\ndef test_VerifyingKey_verify(\n    signature, decoder, mod_apply, fun, vrf_mthd, vrf_data\n):\n    sig = mod_apply(signature)\n\n    assert vrf_mthd(sig, fun(vrf_data), sigdecode=decoder)\n\n\n# test SigningKey.from_string()\nprv_key_bytes = (\n    b\"^\\xc8B\\x0b\\xd6\\xef\\x92R\\xa9B\\xe9\\x89\\x04\u003c\\xa2\"\n    b\"\\x9fV\\x1f\\xa5%w\\x0e\\xb1\\xc5\"\n)\nassert len(prv_key_bytes) == 24\nconverters = []\nfor modifier, convert in [\n    (\"bytes\", lambda x: x),\n    (\"bytes memoryview\", buffer),\n    (\"bytearray\", bytearray),\n    (\"bytearray memoryview\", lambda x: buffer(bytearray(x))),\n    (\"array.array of bytes\", lambda x: array.array(\"B\", x)),\n    (\"array.array of bytes memoryview\", lambda x: buffer(array.array(\"B\", x))),\n    (\"array.array of ints\", lambda x: array.array(\"I\", x)),\n    (\"array.array of ints memoryview\", lambda x: buffer(array.array(\"I\", x))),\n]:\n    converters.append(pytest.param(convert, id=modifier))\n\n\n@pytest.mark.parametrize(\"convert\", converters)\ndef test_SigningKey_from_string(convert):\n    key = convert(prv_key_bytes)\n    sk = SigningKey.from_string(key)\n\n    assert sk.to_string() == prv_key_bytes\n\n\n# test SigningKey.from_der()\nprv_key_str = (\n    \"-----BEGIN EC PRIVATE KEY-----\\n\"\n    \"MF8CAQEEGF7IQgvW75JSqULpiQQ8op9WH6Uldw6xxaAKBggqhkjOPQMBAaE0AzIA\\n\"\n    \"BLiBd9CE7xf15FY5QIAoNg+fWbSk1yZOYtoGUdzkejWkxbRc9RWTQjqLVXucIJnz\\n\"\n    \"bA==\\n\"\n    \"-----END EC PRIVATE KEY-----\\n\"\n)\nkey_bytes = unpem(prv_key_str)\nassert isinstance(key_bytes, bytes)\n\n# last two converters are for array.array of ints, those require input\n# that's multiple of 4, which no curve we support produces\n@pytest.mark.parametrize(\"convert\", converters[:-2])\ndef test_SigningKey_from_der(convert):\n    key = convert(key_bytes)\n    sk = SigningKey.from_der(key)\n\n    assert sk.to_string() == prv_key_bytes\n\n\n# test SigningKey.sign_deterministic()\nextra_entropy = b\"\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\"\n\n\n@pytest.mark.parametrize(\"convert\", converters)\ndef test_SigningKey_sign_deterministic(convert):\n    sig = sk.sign_deterministic(\n        convert(data), extra_entropy=convert(extra_entropy)\n    )\n\n    vk.verify(sig, data)\n\n\n# test SigningKey.sign_digest_deterministic()\n@pytest.mark.parametrize(\"convert\", converters)\ndef test_SigningKey_sign_digest_deterministic(convert):\n    sig = sk.sign_digest_deterministic(\n        convert(data_hash), extra_entropy=convert(extra_entropy)\n    )\n\n    vk.verify(sig, data)\n\n\n@pytest.mark.parametrize(\"convert\", converters)\ndef test_SigningKey_sign(convert):\n    sig = sk.sign(convert(data))\n\n    vk.verify(sig, data)\n\n\n@pytest.mark.parametrize(\"convert\", converters)\ndef test_SigningKey_sign_digest(convert):\n    sig = sk.sign_digest(convert(data_hash))\n\n    vk.verify(sig, data)\n\n\ndef test_SigningKey_with_unlikely_value():\n    sk = SigningKey.from_secret_exponent(NIST256p.order - 1, curve=NIST256p)\n    vk = sk.verifying_key\n    sig = sk.sign(b\"hello\")\n    assert vk.verify(sig, b\"hello\")\n\n\ndef test_SigningKey_with_custom_curve_old_point():\n    generator = generator_brainpoolp160r1\n    generator = Point(\n        generator.curve(),\n        generator.x(),\n        generator.y(),\n        generator.order(),\n    )\n\n    curve = Curve(\n        \"BRAINPOOLP160r1\",\n        generator.curve(),\n        generator,\n        (1, 3, 36, 3, 3, 2, 8, 1, 1, 1),\n    )\n\n    sk = SigningKey.from_secret_exponent(12, curve)\n\n    sk2 = SigningKey.from_secret_exponent(12, BRAINPOOLP160r1)\n\n    assert sk.privkey == sk2.privkey\n\n\ndef test_VerifyingKey_inequality_with_different_curves():\n    sk1 = SigningKey.from_secret_exponent(2, BRAINPOOLP160r1)\n    sk2 = SigningKey.from_secret_exponent(2, NIST256p)\n\n    assert not (sk1.verifying_key == sk2.verifying_key)\n\n\ndef test_VerifyingKey_inequality_with_different_secret_points():\n    sk1 = SigningKey.from_secret_exponent(2, BRAINPOOLP160r1)\n    sk2 = SigningKey.from_secret_exponent(3, BRAINPOOLP160r1)\n\n    assert not (sk1.verifying_key == sk2.verifying_key)\n\n\ndef test_SigningKey_from_pem_pkcs8v2_EdDSA():\n    pem = \"\"\"-----BEGIN PRIVATE KEY-----\n    MFMCAQEwBQYDK2VwBCIEICc2F2ag1n1QP0jY+g9qWx5sDkx0s/HdNi3cSRHw+zsI\n    oSMDIQA+HQ2xCif8a/LMWR2m5HaCm5I2pKe/cc8OiRANMHxjKQ==\n    -----END PRIVATE KEY----",
  "File": ".venv/lib/python3.12/site-packages/ecdsa/test_keys.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 5.0888295,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/ecdsa/test_keys.py:private-key:846"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 46,
  "EndLine": 46,
  "StartColumn": 14,
  "EndColumn": 116,
  "Match": "token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoiYiJ9.jiMyrsmD8AoHWeQgmxZ5yq8z0lXS67_QGs52AzC8Ru8'",
  "Secret": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoiYiJ9.jiMyrsmD8AoHWeQgmxZ5yq8z0lXS67_QGs52AzC8Ru8",
  "File": ".venv/lib/python3.12/site-packages/jose/__pycache__/jws.cpython-312.pyc",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 5.328994,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/jose/__pycache__/jws.cpython-312.pyc:generic-api-key:46"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 69,
  "EndLine": 69,
  "StartColumn": 14,
  "EndColumn": 116,
  "Match": "token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoiYiJ9.jiMyrsmD8AoHWeQgmxZ5yq8z0lXS67_QGs52AzC8Ru8'",
  "Secret": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjoiYiJ9.jiMyrsmD8AoHWeQgmxZ5yq8z0lXS67_QGs52AzC8Ru8",
  "File": ".venv/lib/python3.12/site-packages/jose/jws.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 5.328994,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/jose/jws.py:generic-api-key:69"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 745,
  "EndLine": 745,
  "StartColumn": 38,
  "EndColumn": 60,
  "Match": "key: Ed25519PrivateKey ",
  "Secret": "Ed25519PrivateKey",
  "File": ".venv/lib/python3.12/site-packages/jwt/algorithms.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.8521688,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/jwt/algorithms.py:generic-api-key:745"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 433,
  "EndLine": 433,
  "StartColumn": 10,
  "EndColumn": 31,
  "Match": "TOKEN = \"abc123def456\"",
  "Secret": "abc123def456",
  "File": ".venv/lib/python3.12/site-packages/loguru-0.7.3.dist-info/METADATA",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.5849626,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/loguru-0.7.3.dist-info/METADATA:generic-api-key:433"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 40,
  "EndLine": 40,
  "StartColumn": 2,
  "EndColumn": 26,
  "Match": "KEY1 = '4AOGGDBBQSYHNTUZ'",
  "Secret": "4AOGGDBBQSYHNTUZ",
  "File": ".venv/lib/python3.12/site-packages/passlib/tests/test_totp.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.75,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/passlib/tests/test_totp.py:generic-api-key:40"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 481,
  "EndLine": 481,
  "StartColumn": 16,
  "EndColumn": 37,
  "Match": "key=\"ACDEFGHJKL234567\"",
  "Secret": "ACDEFGHJKL234567",
  "File": ".venv/lib/python3.12/site-packages/passlib/tests/test_totp.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 4,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/passlib/tests/test_totp.py:generic-api-key:481"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 491,
  "EndLine": 491,
  "StartColumn": 16,
  "EndColumn": 37,
  "Match": "key=\"ACDEFGHJKL234567\"",
  "Secret": "ACDEFGHJKL234567",
  "File": ".venv/lib/python3.12/site-packages/passlib/tests/test_totp.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 4,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/passlib/tests/test_totp.py:generic-api-key:491"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 501,
  "EndLine": 501,
  "StartColumn": 16,
  "EndColumn": 40,
  "Match": "key=\"S3JD-VB7Q-D2R7-JPXX\"",
  "Secret": "S3JD-VB7Q-D2R7-JPXX",
  "File": ".venv/lib/python3.12/site-packages/passlib/tests/test_totp.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.5766177,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/passlib/tests/test_totp.py:generic-api-key:501"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 588,
  "EndLine": 588,
  "StartColumn": 45,
  "EndColumn": 66,
  "Match": "key='4aoggdbbqsyhntuz'",
  "Secret": "4aoggdbbqsyhntuz",
  "File": ".venv/lib/python3.12/site-packages/passlib/tests/test_totp.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.75,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/passlib/tests/test_totp.py:generic-api-key:588"
 },
 {
  "Description": "Uncovered a JSON Web Token, which may lead to unauthorized access to web applications and sensitive user data.",
  "StartLine": 119,
  "EndLine": 119,
  "StartColumn": 8,
  "EndColumn": 109,
  "Match": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ2YWx1ZSJ9.FG-8UppwHaFp1LgRYQQeS6EDQF7_6-bMFegNucHjmWg'",
  "Secret": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJ2YWx1ZSJ9.FG-8UppwHaFp1LgRYQQeS6EDQF7_6-bMFegNucHjmWg",
  "File": ".venv/lib/python3.12/site-packages/python_jose-3.5.0.dist-info/METADATA",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 5.4066906,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "jwt",
  "Fingerprint": ".venv/lib/python3.12/site-packages/python_jose-3.5.0.dist-info/METADATA:jwt:119"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 88,
  "EndLine": 116,
  "StartColumn": 30,
  "EndColumn": 38,
  "Match": "-----BEGIN RSA PRIVATE KEY-----' and\n        '-----END RSA PRIVATE KEY-----' markers.\n\n    :return: the base64-decoded content between the start and end markers.\n\n    @raise ValueError: when the content is invalid, for example when the start\n        marker cannot be found.\n\n    \"\"\"\n\n    # We want bytes, not text. If it's text, it can be converted to ASCII bytes.\n    if not isinstance(contents, bytes):\n        contents = contents.encode(\"ascii\")\n\n    (pem_start, pem_end) = _markers(pem_marker)\n    pem_lines = [line for line in _pem_lines(contents, pem_start, pem_end)]\n\n    # Base64-decode the contents\n    pem = b\"\".join(pem_lines)\n    return base64.standard_b64decode(pem)\n\n\ndef save_pem(contents: bytes, pem_marker: FlexiText) -\u003e bytes:\n    \"\"\"Saves a PEM file.\n\n    :param contents: the contents to encode in PEM format\n    :param pem_marker: the marker of the PEM content, such as 'RSA PRIVATE KEY'\n        when your file has '-----BEGIN RSA PRIVATE KEY-----' and\n        '-----END RSA PRIVATE KEY----",
  "Secret": "-----BEGIN RSA PRIVATE KEY-----' and\n        '-----END RSA PRIVATE KEY-----' markers.\n\n    :return: the base64-decoded content between the start and end markers.\n\n    @raise ValueError: when the content is invalid, for example when the start\n        marker cannot be found.\n\n    \"\"\"\n\n    # We want bytes, not text. If it's text, it can be converted to ASCII bytes.\n    if not isinstance(contents, bytes):\n        contents = contents.encode(\"ascii\")\n\n    (pem_start, pem_end) = _markers(pem_marker)\n    pem_lines = [line for line in _pem_lines(contents, pem_start, pem_end)]\n\n    # Base64-decode the contents\n    pem = b\"\".join(pem_lines)\n    return base64.standard_b64decode(pem)\n\n\ndef save_pem(contents: bytes, pem_marker: FlexiText) -\u003e bytes:\n    \"\"\"Saves a PEM file.\n\n    :param contents: the contents to encode in PEM format\n    :param pem_marker: the marker of the PEM content, such as 'RSA PRIVATE KEY'\n        when your file has '-----BEGIN RSA PRIVATE KEY-----' and\n        '-----END RSA PRIVATE KEY----",
  "File": ".venv/lib/python3.12/site-packages/rsa/pem.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 4.799614,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/rsa/pem.py:private-key:88"
 },
 {
  "Description": "Identified a Private Key, which may compromise cryptographic security and sensitive data encryption.",
  "StartLine": 603,
  "EndLine": 604,
  "StartColumn": 47,
  "EndColumn": 48,
  "Match": "-----BEGIN RSA PRIVATE KEY-----\" and\n        after the \"-----END RSA PRIVATE KEY----",
  "Secret": "-----BEGIN RSA PRIVATE KEY-----\" and\n        after the \"-----END RSA PRIVATE KEY----",
  "File": ".venv/lib/python3.12/site-packages/rsa/key.py",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.9106252,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "private-key",
  "Fingerprint": ".venv/lib/python3.12/site-packages/rsa/key.py:private-key:603"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 654,
  "EndLine": 654,
  "StartColumn": 5,
  "EndColumn": 44,
  "Match": "access_token\": \"eyJhbGciOiJIUzI1NiIs...\"",
  "Secret": "eyJhbGciOiJIUzI1NiIs...",
  "File": "MANUAL_CORRECCIONES_DETALLADAS.md",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.8164027,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": "MANUAL_CORRECCIONES_DETALLADAS.md:generic-api-key:654"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 453,
  "EndLine": 453,
  "StartColumn": 6,
  "EndColumn": 52,
  "Match": "token=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
  "Secret": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "File": "docs/bot/API_ENDPOINTS.md",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 4.419391,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": "docs/bot/API_ENDPOINTS.md:generic-api-key:453"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 88,
  "EndLine": 89,
  "StartColumn": 2,
  "EndColumn": 1,
  "Match": "SECRET_KEY=tu_clave_secreta_32_caracteres_aqui_2024",
  "Secret": "tu_clave_secreta_32_caracteres_aqui_2024",
  "File": "docs/deployment/02_PLAN_DESPLIEGUE_PERSONALIZADO.md",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.6970851,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": "docs/deployment/02_PLAN_DESPLIEGUE_PERSONALIZADO.md:generic-api-key:88"
 },
 {
  "Description": "Detected a Generic API Key, potentially exposing access to various services and sensitive operations.",
  "StartLine": 263,
  "EndLine": 264,
  "StartColumn": 24,
  "EndColumn": 1,
  "Match": "SECRET_KEY=tu_clave_secreta_32_chars",
  "Secret": "tu_clave_secreta_32_chars",
  "File": "docs/deployment/02_PLAN_DESPLIEGUE_PERSONALIZADO.md",
  "SymlinkFile": "",
  "Commit": "",
  "Entropy": 3.5132697,
  "Author": "",
  "Email": "",
  "Date": "",
  "Message": "",
  "Tags": [],
  "RuleID": "generic-api-key",
  "Fingerprint": "docs/deployment/02_PLAN_DESPLIEGUE_PERSONALIZADO.md:generic-api-key:263"
 }
]
