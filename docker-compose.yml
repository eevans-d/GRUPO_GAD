version: '3.8'

services:
  db:
    image: postgis/postgis:15-3.3-alpine
    container_name: gad_db_dev
    env_file: ./.env.production
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docker/init_postgis.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - gad-network

  redis:
    image: redis:7-alpine
    container_name: gad_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - gad-network

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: gad_api_dev
    env_file: ./.env.production
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      # Normalizar health endpoint a la ruta usada por la API
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - gad-network

  bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.bot
    container_name: gad_bot_dev
    env_file: ./.env.production
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - gad-network

networks:
  gad-network:
    driver: bridge

volumes:
  postgres_data: