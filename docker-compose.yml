version: '3.8'

services:
  db:
    image: postgis/postgis:15-3.3-alpine
    container_name: gad_db_dev
    env_file: ./.env
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docker/init_postgis.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - gad-network

  redis:
    image: redis:7-alpine
    container_name: gad_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - gad-network

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: gad_api_dev
    env_file: ./.env
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Provide DATABASE_URL fallback if not defined in .env
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_SERVER:-db}/${POSTGRES_DB}}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - gad-network

networks:
  gad-network:
    driver: bridge

volumes:
  postgres_data:
