version: '3.9'

services:
  db:
    image: postgis/postgis:15-3.4-alpine
    container_name: gad_db_dev
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docker/init_postgis.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - gad-network

  redis:
    image: redis:7.2-alpine
    container_name: gad_redis_dev
    command: redis-server --save "" --appendonly no
    ports:
      - "6380:6379"
    restart: unless-stopped
    networks:
      - gad-network

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: gad_api_dev
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini
      - ./config:/app/config
      - ./dashboard:/app/dashboard
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/metrics"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - gad-network

  bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.bot
    container_name: gad_bot_dev
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy # Bot starts once API is healthy
    restart: unless-stopped
    networks:
      - gad-network

  caddy:
    image: caddy:2.8
    container_name: gad_caddy_dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/metrics"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      api:
        condition: service_healthy
    networks:
      - gad-network

networks:
  gad-network:
    driver: bridge

volumes:
  postgres_data:
  caddy_data:
  caddy_config: