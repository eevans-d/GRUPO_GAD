version: '3.8'

# Archivo de Docker Compose para el entorno de PRODUCCIÓN.
# Diferencias clave con el docker-compose.yml de desarrollo:
# - Utiliza un archivo .env.production para las variables de entorno.
# - No expone los puertos de la base de datos (PostgreSQL) ni de Redis al host.
#   La comunicación con estos servicios debe ocurrir a través de la red interna de Docker.
# - El puerto de la API (8000) se mantiene expuesto para que un reverse proxy (como Nginx o Traefik)
#   pueda redirigir el tráfico externo hacia él.

services:
  db:
    image: postgres:15-alpine
    container_name: gad_db_prod
    restart: unless-stopped
    env_file:
      - ../.env.production
    environment:
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - gad-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: gad_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data_prod:/data
    networks:
      - gad-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: gad_api_prod
    restart: unless-stopped
    env_file:
      - ../.env.production
    ports:
      - "8000:8000" # Exponer para el reverse proxy
    volumes:
      - ../logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gad-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile.bot
    container_name: gad_bot_prod
    restart: unless-stopped
    env_file:
      - ../.env.production
    depends_on:
      api:
        condition: service_healthy
    networks:
      - gad-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  gad-network-prod:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
