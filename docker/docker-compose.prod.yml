version: '3.8'

# Archivo de Docker Compose para el entorno de PRODUCCIÓN.
# Diferencias clave con el docker-compose.yml de desarrollo:
# - Utiliza un archivo .env.production para las variables de entorno.
# - Usa PostGIS (postgis/postgis:15-3.4-alpine) para capacidades geoespaciales.
# - No expone los puertos de la base de datos (PostgreSQL) ni de Redis al host.
# - La API no se expone directamente al host; toda comunicación externa pasa por Caddy.
# - Incluye Caddy como proxy inverso y punto de entrada HTTPS único.
# - Todos los servicios tienen healthchecks y logging configurado.
# - Los 5 servicios (db, redis, api, bot, caddy) están orquestados en una red privada.

services:
  db:
    image: postgis/postgis:15-3.4-alpine
    container_name: gad_db_prod
    restart: unless-stopped
    env_file:
      - ../.env.production
    environment:
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init_postgis.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gad-network-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: gad_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data_prod:/data
    networks:
      - gad-network-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    image: ghcr.io/eevans-d/grupo_gad/api:v1.0.0
    # pull_policy: always  # Descomenta si quieres forzar pull en cada 'up'
    container_name: gad_api_prod
    restart: unless-stopped
    env_file:
      - ../.env.production
    # En producción, la API NO debe exponerse directamente al host
    # Toda comunicación externa pasa por Caddy
    volumes:
      - ../logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gad-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile.bot
    container_name: gad_bot_prod
    restart: unless-stopped
    env_file:
      - ../.env.production
    depends_on:
      api:
        condition: service_healthy
    networks:
      - gad-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  caddy:
    image: caddy:2.8-alpine
    container_name: gad_caddy_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3 support
    volumes:
      - ../Caddyfile:/etc/caddy/Caddyfile
      - caddy_data_prod:/data
      - caddy_config_prod:/config
    depends_on:
      api:
        condition: service_healthy
    networks:
      - gad-network-prod
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  gad-network-prod:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
  caddy_data_prod:
  caddy_config_prod:
