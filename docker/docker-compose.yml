version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: gad_db
    restart: unless-stopped
    environment:
      # En producci√≥n NO usar defaults; proveer via env_file .env.production
      POSTGRES_USER: ${POSTGRES_USER:-gad_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gad_password}
      POSTGRES_DB: ${POSTGRES_DB:-gad_db}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - gad-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gad_user} -d ${POSTGRES_DB:-gad_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: gad_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - gad-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: gad_api
    restart: unless-stopped
    environment:
      - POSTGRES_SERVER=db
      - REDIS_HOST=redis
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      # Prefer explicit DATABASE_URL; do not rely on insecure defaults in production
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://${POSTGRES_USER:-gad_user}:${POSTGRES_PASSWORD:-gad_password}@${POSTGRES_SERVER:-db}:5432/${POSTGRES_DB:-gad_db}}
    env_file:
      - ../.env
    ports:
      - "8000:8000"
    volumes:
      - ../logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gad-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile.bot
    container_name: gad_bot
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://api:8000
    env_file:
      - ../.env
    depends_on:
      api:
        condition: service_healthy
    networks:
      - gad-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  gad-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
