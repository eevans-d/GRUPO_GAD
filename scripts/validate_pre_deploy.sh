#!/bin/bash
# GRUPO_GAD Pre-Deployment Validation Script
# Implements CHECKLIST_VERIFICACION.md automatically
# Generated by: Prompt Pasivo B - Checklist Verificación

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

PASS=0
FAIL=0
WARN=0

echo "🔍 GRUPO_GAD Pre-Deployment Validation"
echo "======================================"

check_pass() {
    echo -e "${GREEN}✅ PASS${NC}: $1"
    ((PASS++))
}

check_fail() {
    echo -e "${RED}❌ FAIL${NC}: $1"
    ((FAIL++))
}

check_warn() {
    echo -e "${YELLOW}⚠️  WARN${NC}: $1" 
    ((WARN++))
}

echo ""
echo "📊 NIVEL 1: INFRAESTRUCTURA MÍNIMA"
echo "=================================="

# Check PostGIS
if docker compose exec -T db psql -U postgres -d postgres -c "SELECT PostGIS_version();" >/dev/null 2>&1; then
    check_pass "PostGIS is installed and functional"
else
    check_fail "PostGIS is not accessible or not installed"
fi

# Check Redis
if docker compose exec -T redis redis-cli PING | grep -q PONG; then
    check_pass "Redis is accessible and responding"
else
    check_warn "Redis is not accessible (optional component)"
fi

# Check for secrets in repo
if git grep -i "CHANGEME\|sk-\|bot:[0-9]" -- '*.py' '*.yml' '*.yaml' '*.json' | grep -v ".example\|.md:" >/dev/null 2>&1; then
    check_fail "Hardcoded secrets found in repository"
    git grep -i "CHANGEME\|sk-\|bot:[0-9]" -- '*.py' '*.yml' '*.yaml' '*.json' | grep -v ".example\|.md:" | head -3
else
    check_pass "No hardcoded secrets found in repository"
fi

echo ""
echo "⚙️  NIVEL 2: CONFIGURACIÓN CONSISTENTE"  
echo "===================================="

# Check for multiple config files
config_files=$(find . -name "config.py" -o -name "settings.py" | grep -v __pycache__ | grep -v test | wc -l)
if [ "$config_files" -eq 1 ]; then
    check_pass "Single source of truth for configuration"
else
    check_fail "Multiple configuration files found - potential conflicts"
    find . -name "config.py" -o -name "settings.py" | grep -v __pycache__ | grep -v test
fi

# Check environment variables
if [ -f ".env.example" ]; then
    check_pass ".env.example exists for reference"
else
    check_warn ".env.example not found - consider adding for documentation"
fi

echo ""
echo "🎯 NIVEL 3: FUNCIONALIDAD CRÍTICA"
echo "================================"

# Check health endpoint
if curl -f -s http://localhost:8000/api/v1/health >/dev/null 2>&1; then
    check_pass "Health endpoint is responding"
else
    check_fail "Health endpoint is not accessible"
fi

# Check metrics endpoint  
if curl -f -s http://localhost:8000/metrics >/dev/null 2>&1; then
    check_pass "Metrics endpoint is responding"
else
    check_fail "Metrics endpoint is not accessible"
fi

# Check for emergency endpoint
if grep -r "/emergency" src/api/routers/ >/dev/null 2>&1; then
    check_pass "Emergency endpoint implementation found"
else
    check_fail "Emergency endpoint not implemented - critical for production"
fi

# Check webhook implementation
if grep -r "set_webhook\|webhook" src/bot/ >/dev/null 2>&1; then
    check_pass "Telegram webhook implementation found"
else
    check_fail "Telegram webhook not implemented - polling not scalable for production"
fi

echo ""
echo "📈 NIVEL 4: OBSERVABILIDAD"
echo "=========================="

# Check structured logging
if grep -r "json.*log\|structured.*log" src/core/logging.py >/dev/null 2>&1; then 
    check_pass "Structured logging is configured"
else
    check_warn "Structured logging not clearly configured"
fi

# Check advanced metrics
metrics_content=$(curl -s http://localhost:8000/metrics 2>/dev/null || echo "")
if echo "$metrics_content" | grep -q "app_uptime_seconds"; then
    check_pass "Basic metrics are exposed"
else
    check_warn "Advanced metrics may be missing"
fi

echo ""
echo "🚀 NIVEL 5: SCRIPTS DE DESPLIEGUE"
echo "================================"

# Check start script
if [ -f "scripts/start.sh" ]; then
    if grep -q "alembic upgrade head" scripts/start.sh; then
        check_pass "Start script includes database migrations"
    else
        check_warn "Start script exists but may not handle migrations"  
    fi
else
    check_fail "Start script missing - required for automated deployment"
fi

# Check Alembic configuration
if [ -f "alembic.ini" ] && [ -d "alembic/versions" ]; then
    check_pass "Alembic migrations are configured"
else
    check_fail "Alembic migrations not properly configured"
fi

echo ""
echo "📋 RESUMEN EJECUTIVO"
echo "==================="
echo -e "Verificaciones ejecutadas: $((PASS + FAIL + WARN))"
echo -e "${GREEN}Passed: $PASS${NC}"
echo -e "${RED}Failed: $FAIL${NC}"  
echo -e "${YELLOW}Warnings: $WARN${NC}"

echo ""
if [ $FAIL -eq 0 ]; then
    echo -e "${GREEN}🎉 RESULTADO: APTO PARA DESPLIEGUE${NC}"
    echo "Todos los checks críticos han pasado."
    if [ $WARN -gt 0 ]; then
        echo -e "${YELLOW}Nota: Hay $WARN warnings que deberían resolverse en futuras versiones.${NC}"
    fi
    exit 0
else
    echo -e "${RED}⛔ RESULTADO: NO APTO PARA DESPLIEGUE${NC}"
    echo "Se encontraron $FAIL issues críticos que deben resolverse antes del despliegue."
    echo ""
    echo "Acciones requeridas:"
    echo "1. Resolver todos los FAIL items mostrados arriba"
    echo "2. Re-ejecutar este script: bash scripts/validate_pre_deploy.sh"
    echo "3. Solo desplegar cuando este script retorne exit code 0"
    exit 1
fi