# -*- coding: utf-8 -*-
"""
Manejador central para todos los callback queries del bot.
"""

from telegram import Update
from telegram.ext import CallbackContext, CallbackQueryHandler
from telegram import Bot, Chat, User
from loguru import logger

from config.settings import settings
from src.bot.utils.keyboards import KeyboardFactory
from src.bot.handlers.wizard_text_handler import get_step_header, format_task_summary


async def handle_callback_query(
    update: Update, 
    context: CallbackContext[Bot, Update, Chat, User]
) -> None:
    """
    Procesa todos los callbacks del bot usando patr√≥n {action}:{entity}:{id}.
    
    Args:
        update: Update de Telegram con callback_query
        context: Contexto de la conversaci√≥n
    """
    query = update.callback_query
    
    if query is None:
        return
    
    # Acknowledge inmediato para evitar spinner infinito
    await query.answer()
    
    callback_data = query.data
    
    if not callback_data:
        await query.edit_message_text("‚ùå Error: callback inv√°lido")
        return
    
    parts = callback_data.split(":")
    
    if len(parts) < 2:
        await query.edit_message_text("‚ùå Error: formato de callback inv√°lido")
        return
    
    action = parts[0]
    entity = parts[1]
    
    # Log estructurado
    logger.bind(callback=True).info(
        f"Callback procesado: {callback_data}",
        user_id=update.effective_user.id if update.effective_user else None,
        action=action,
        entity=entity
    )
    
    # Router de acciones
    try:
        if action == "menu":
            await handle_menu_action(query, context, entity, parts[2:])
        elif action == "crear":
            await handle_crear_action(query, context, entity, parts[2:])
        elif action == "finalizar":
            await handle_finalizar_action(query, context, entity, parts[2:])
        elif action == "page":
            await handle_pagination_action(query, context, entity, parts[2:])
        else:
            await query.edit_message_text(f"‚ùå Acci√≥n desconocida: {action}")
    except Exception as e:
        logger.exception(f"Error procesando callback: {e}")
        await query.answer("‚ùå Error procesando acci√≥n. Intenta nuevamente.", show_alert=True)


async def handle_menu_action(
    query, 
    context: CallbackContext[Bot, Update, Chat, User], 
    entity: str, 
    params: list
) -> None:
    """
    Maneja acciones del men√∫ principal.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto de la conversaci√≥n
        entity: Entidad del men√∫ (crear, finalizar, tareas, ayuda)
        params: Par√°metros adicionales del callback
    """
    if entity == "main":
        # Volver al men√∫ principal
        keyboard = KeyboardFactory.main_menu()
        await query.edit_message_text(
            "ü§ñ *Men√∫ Principal*\n\nSelecciona una opci√≥n:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif entity == "crear":
        # Iniciar wizard de creaci√≥n (MVP: solo mostrar tipos)
        keyboard = KeyboardFactory.task_types()
        await query.edit_message_text(
            "üìù *Crear Nueva Tarea*\n\n"
            "Paso 1: Selecciona el tipo de tarea:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif entity == "finalizar":
        # Iniciar flujo de finalizaci√≥n (Fase 3)
        # Llamar directamente a la lista de tareas pendientes
        await handle_finalizar_action(query, context, "list", [])
    
    elif entity == "tareas":
        # Mostrar lista de tareas (MVP: mensaje temporal)
        keyboard = KeyboardFactory.back_button()
        await query.edit_message_text(
            "üìä *Mis Tareas*\n\n"
            "üöß Lista de tareas en desarrollo.\n"
            "Pr√≥ximamente: visualizaci√≥n completa.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif entity == "ayuda":
        # Mostrar ayuda
        keyboard = KeyboardFactory.back_button()
        help_text = (
            "‚ÑπÔ∏è *Ayuda - GAD Bot*\n\n"
            "*Comandos disponibles:*\n"
            "‚Ä¢ `/start` - Men√∫ principal\n"
            "‚Ä¢ `/crear` - Crear tarea (texto)\n"
            "‚Ä¢ `/finalizar` - Finalizar tarea (texto)\n\n"
            "*Botones interactivos:*\n"
            "‚Ä¢ üìã Crear Tarea - Wizard guiado\n"
            "‚Ä¢ ‚úÖ Finalizar - Selector de tareas\n"
            "‚Ä¢ üìä Mis Tareas - Lista personal\n\n"
            "*Estado:*\n"
            "‚úÖ Men√∫ principal - Funcional\n"
            "üöß Wizard de creaci√≥n - En desarrollo\n"
            "üöß Finalizar con botones - En desarrollo"
        )
        await query.edit_message_text(
            help_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    else:
        await query.edit_message_text(f"‚ùå Opci√≥n de men√∫ desconocida: {entity}")


async def handle_crear_action(
    query, 
    context: CallbackContext[Bot, Update, Chat, User], 
    entity: str, 
    params: list
) -> None:
    """
    Maneja wizard de creaci√≥n de tareas.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto de la conversaci√≥n
        entity: Paso del wizard (tipo, delegado, asignado, confirm, cancel)
        params: Par√°metros adicionales
    """
    if entity == "tipo":
        # Step 1: Usuario seleccion√≥ un tipo de tarea
        if not params:
            await query.edit_message_text("‚ùå Error: tipo de tarea no especificado")
            return
        
        tipo = params[0]
        
        # Inicializar wizard
        context.user_data['wizard'] = {
            'command': 'crear',
            'current_step': 2,
            'data': {
                'tipo': tipo
            }
        }
        
        logger.bind(wizard=True).info(
            f"Wizard iniciado - Step 1 (tipo): {tipo}",
            user_id=query.from_user.id if query.from_user else None
        )
        
        # Step 2: Solicitar c√≥digo
        keyboard = KeyboardFactory.back_button("crear:cancel")
        header = get_step_header(2, "Crear Nueva Tarea")
        await query.edit_message_text(
            f"{header}\n"
            f"Tipo: *{tipo}*\n\n"
            f"üî§ *Ingresa el c√≥digo √∫nico de la tarea:*\n\n"
            f"üìå *Formato sugerido:* `TIP-2025-001`\n"
            f"‚ö†Ô∏è *Importante:* M√°ximo 20 caracteres",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif entity == "delegado":
        # Step 4: Usuario seleccion√≥ un delegado
        if not params:
            await query.edit_message_text("‚ùå Error: delegado no especificado")
            return
        
        delegado_id = params[0]
        
        # Actualizar state
        if 'wizard' not in context.user_data:
            await query.edit_message_text("‚ùå Error: no hay wizard activo")
            return
        
        context.user_data['wizard']['data']['delegado_id'] = int(delegado_id)
        context.user_data['wizard']['current_step'] = 5
        
        logger.bind(wizard=True).info(
            f"Wizard Step 4: delegado seleccionado {delegado_id}",
            user_id=query.from_user.id if query.from_user else None
        )
        
        # Step 5: Mostrar selector multi-select de asignados
        # TODO: Llamar a API para obtener lista de agentes
        # Por ahora, mostrar mensaje temporal y pedir IDs
        keyboard = KeyboardFactory.back_button("crear:cancel")
        await query.edit_message_text(
            f"üìù *Crear Tarea - Paso 5 de 6*\n\n"
            f"Delegado: ID {delegado_id}\n\n"
            f"Por favor, env√≠a los *IDs de agentes asignados*\n"
            f"separados por comas (ej: 101,102,103):",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif entity == "asignado":
        # Step 5: Toggle de asignado (multi-select)
        if not params or len(params) < 2:
            await query.answer("‚ùå Error: par√°metros inv√°lidos")
            return
        
        action_type = params[0]  # 'toggle' o 'done'
        
        if action_type == "toggle":
            user_id_str = params[1]
            
            # Obtener o inicializar lista de asignados
            if 'asignados' not in context.user_data['wizard']['data']:
                context.user_data['wizard']['data']['asignados'] = []
            
            asignados = context.user_data['wizard']['data']['asignados']
            user_id = int(user_id_str)
            
            # Toggle: a√±adir o quitar
            if user_id in asignados:
                asignados.remove(user_id)
            else:
                asignados.append(user_id)
            
            # TODO: Regenerar keyboard con checkboxes actualizados
            await query.answer(f"{'‚úÖ A√±adido' if user_id in asignados else '‚¨ú Quitado'}")
        
        elif action_type == "done":
            # Finalizar selecci√≥n y continuar al resumen
            await _show_wizard_summary(query, context)
    
    elif entity == "confirm":
        # Step 6: Confirmar creaci√≥n o editar
        action_type = params[0] if params else None
        
        if action_type == "yes":
            # Crear tarea
            await _create_task_from_wizard(query, context)
        elif action_type == "edit":
            # Volver al inicio del wizard para editar
            keyboard = KeyboardFactory.main_menu()
            await query.edit_message_text(
                "‚úèÔ∏è *Edici√≥n de Tarea*\n\n"
                "Funci√≥n de edici√≥n en desarrollo.\n"
                "Por ahora, cancela y vuelve a crear la tarea.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # Callback antiguo sin tipo espec√≠fico, asumir confirmaci√≥n
            await _create_task_from_wizard(query, context)
    
    elif entity == "cancel":
        # Cancelar wizard
        if 'wizard' in context.user_data:
            del context.user_data['wizard']
        
        logger.bind(wizard=True).info(
            "Wizard cancelado por usuario",
            user_id=query.from_user.id if query.from_user else None
        )
        
        keyboard = KeyboardFactory.main_menu()
        await query.edit_message_text(
            "‚ùå *Creaci√≥n Cancelada*\n\n"
            "Volviendo al men√∫ principal...",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    else:
        await query.edit_message_text(f"‚ùå Acci√≥n de creaci√≥n desconocida: {entity}")


async def _show_wizard_summary(query, context: CallbackContext[Bot, Update, Chat, User]) -> None:
    """
    Muestra resumen del wizard antes de crear la tarea.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto con datos del wizard
    """
    wizard_data = context.user_data.get('wizard', {}).get('data', {})
    
    # Usar funci√≥n de formato mejorada
    summary_text = format_task_summary(wizard_data)
    
    keyboard = KeyboardFactory.task_confirmation()
    
    await query.edit_message_text(
        summary_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await query.edit_message_text(
        summary_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


async def _create_task_from_wizard(query, context: CallbackContext[Bot, Update, Chat, User]) -> None:
    """
    Crea la tarea en la API con los datos del wizard.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto con datos del wizard
    """
    wizard_data = context.user_data.get('wizard', {}).get('data', {})
    
    # TODO: Llamar a API para crear tarea
    # from src.bot.services.api_service import ApiService
    # from src.schemas.tarea import TareaCreate
    # api_service = ApiService(settings.API_V1_STR)
    # task_create = TareaCreate(**wizard_data)
    # new_task = api_service.create_task(task_create)
    
    logger.bind(wizard=True).info(
        "Tarea creada desde wizard",
        user_id=query.from_user.id if query.from_user else None,
        data=wizard_data
    )
    
    # Limpiar wizard
    if 'wizard' in context.user_data:
        del context.user_data['wizard']
    
    # Mostrar √©xito
    keyboard = KeyboardFactory.main_menu()
    await query.edit_message_text(
        f"‚úÖ *¬°Tarea Creada!*\n\n"
        f"C√≥digo: `{wizard_data.get('codigo', 'N/A')}`\n"
        f"T√≠tulo: {wizard_data.get('titulo', 'N/A')}\n\n"
        f"La tarea ha sido registrada exitosamente.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


async def handle_finalizar_action(
    query, 
    context: CallbackContext[Bot, Update, Chat, User], 
    entity: str, 
    params: list
) -> None:
    """
    Maneja finalizaci√≥n de tareas.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto de la conversaci√≥n
        entity: Acci√≥n (list, select, confirm, cancel)
        params: Par√°metros adicionales
    """
    from src.bot.services.api_service import ApiService
    
    if entity == "list":
        # Mostrar lista de tareas pendientes con paginaci√≥n
        page = int(params[0]) if params else 0
        await _show_pending_tasks_list(query, context, page)
    
    elif entity == "select":
        # Usuario seleccion√≥ una tarea para finalizar
        if not params:
            await query.answer("‚ùå Error: tarea no especificada", show_alert=True)
            return
        
        task_code = params[0]
        
        # Obtener detalles de la tarea desde API
        api_service = ApiService(settings.API_V1_STR)
        user_id = query.from_user.id if query.from_user else 0
        
        # Obtener todas las tareas del usuario
        tareas = api_service.get_user_pending_tasks(user_id)
        
        # Buscar la tarea seleccionada
        tarea_seleccionada = next((t for t in tareas if t.codigo == task_code), None)
        
        if not tarea_seleccionada:
            await query.answer("‚ùå Tarea no encontrada", show_alert=True)
            return
        
        # Guardar en contexto para confirmaci√≥n
        context.user_data['finalizar_task'] = {
            'codigo': task_code,
            'titulo': tarea_seleccionada.titulo,
            'tipo': tarea_seleccionada.tipo
        }
        
        # Mostrar confirmaci√≥n
        await _show_finalize_confirmation(query, context)
    
    elif entity == "confirm":
        # Usuario confirm√≥ finalizaci√≥n
        await _finalize_task(query, context)
    
    elif entity == "cancel":
        # Usuario cancel√≥ finalizaci√≥n
        if 'finalizar_task' in context.user_data:
            del context.user_data['finalizar_task']
        
        # Volver a la lista
        await _show_pending_tasks_list(query, context, page=0)


async def handle_pagination_action(
    query, 
    context: CallbackContext[Bot, Update, Chat, User], 
    entity: str, 
    params: list
) -> None:
    """
    Maneja navegaci√≥n de p√°ginas en listas paginadas.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto de la conversaci√≥n
        entity: Acci√≥n de paginaci√≥n (next, prev, o n√∫mero de p√°gina)
        params: Par√°metros adicionales (lista a paginar)
    """
    # El entity contiene la p√°gina de destino
    try:
        page = int(entity)
    except ValueError:
        await query.answer("‚ùå P√°gina inv√°lida", show_alert=True)
        return
    
    # Determinar qu√© lista mostrar basado en el contexto
    # Por ahora solo soportamos finalizar
    if 'finalizar_context' in context.user_data:
        await _show_pending_tasks_list(query, context, page)
    else:
        await query.answer("‚ùå Contexto de paginaci√≥n perdido", show_alert=True)


async def _show_pending_tasks_list(
    query, 
    context: CallbackContext[Bot, Update, Chat, User], 
    page: int = 0
) -> None:
    """
    Muestra lista paginada de tareas pendientes del usuario.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto de la conversaci√≥n
        page: N√∫mero de p√°gina (0-indexed)
    """
    from src.bot.services.api_service import ApiService
    
    # Obtener user_id
    user_id = query.from_user.id if query.from_user else 0
    
    # Obtener tareas desde API
    api_service = ApiService(settings.API_V1_STR)
    tareas = api_service.get_user_pending_tasks(user_id)
    
    # Guardar contexto de finalizaci√≥n para paginaci√≥n
    context.user_data['finalizar_context'] = True
    
    logger.bind(finalizar=True).info(
        f"Mostrando lista de tareas pendientes, p√°gina {page}",
        user_id=user_id,
        total_tareas=len(tareas)
    )
    
    # Si no hay tareas
    if not tareas:
        keyboard = KeyboardFactory.main_menu()
        await query.edit_message_text(
            "üì≠ *No tienes tareas pendientes*\n\n"
            "¬°Buen trabajo! No hay tareas asignadas a ti en este momento.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        return
    
    # Preparar items para el teclado paginado
    items = [
        (f"üìã {t.codigo} - {t.titulo[:30]}{'...' if len(t.titulo) > 30 else ''}", t.codigo)
        for t in tareas
    ]
    
    # Generar teclado paginado
    keyboard = KeyboardFactory.paginated_list(
        items=items,
        page=page,
        page_size=5,
        action_prefix="finalizar:select"
    )
    
    # Calcular estad√≠sticas de p√°gina
    total_tareas = len(tareas)
    start_idx = page * 5
    end_idx = min(start_idx + 5, total_tareas)
    
    text = (
        f"‚úÖ *Finalizar Tarea*\n\n"
        f"üìä Tienes *{total_tareas}* tarea{'s' if total_tareas > 1 else ''} pendiente{'s' if total_tareas > 1 else ''}.\n"
        f"Mostrando {start_idx + 1}-{end_idx} de {total_tareas}.\n\n"
        f"Selecciona la tarea que deseas finalizar:"
    )
    
    await query.edit_message_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


async def _show_finalize_confirmation(
    query, 
    context: CallbackContext[Bot, Update, Chat, User]
) -> None:
    """
    Muestra pantalla de confirmaci√≥n antes de finalizar tarea.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto con datos de la tarea a finalizar
    """
    task_data = context.user_data.get('finalizar_task', {})
    
    if not task_data:
        await query.answer("‚ùå Error: datos de tarea no encontrados", show_alert=True)
        return
    
    codigo = task_data.get('codigo', 'N/A')
    titulo = task_data.get('titulo', 'N/A')
    tipo = task_data.get('tipo', 'N/A')
    
    confirmation_text = (
        f"‚ö†Ô∏è *Confirmar Finalizaci√≥n*\n\n"
        f"*C√≥digo:* `{codigo}`\n"
        f"*T√≠tulo:* {titulo}\n"
        f"*Tipo:* {tipo}\n\n"
        f"¬øDeseas marcar esta tarea como finalizada?"
    )
    
    keyboard = KeyboardFactory.confirmation("finalizar:confirm", "finalizar:cancel")
    
    await query.edit_message_text(
        confirmation_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


async def _finalize_task(
    query, 
    context: CallbackContext[Bot, Update, Chat, User]
) -> None:
    """
    Finaliza la tarea llamando a la API.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto con datos de la tarea
    """
    from src.bot.services.api_service import ApiService
    
    task_data = context.user_data.get('finalizar_task', {})
    
    if not task_data:
        await query.answer("‚ùå Error: datos de tarea no encontrados", show_alert=True)
        return
    
    codigo = task_data.get('codigo')
    user_id = query.from_user.id if query.from_user else 0
    
    # Llamar a API
    api_service = ApiService(settings.API_V1_STR)
    
    try:
        tarea_finalizada = api_service.finalize_task(codigo, user_id)
        
        logger.bind(finalizar=True).info(
            f"Tarea finalizada exitosamente: {codigo}",
            user_id=user_id
        )
        
        # Limpiar contexto
        if 'finalizar_task' in context.user_data:
            del context.user_data['finalizar_task']
        if 'finalizar_context' in context.user_data:
            del context.user_data['finalizar_context']
        
        # Mostrar √©xito
        keyboard = KeyboardFactory.main_menu()
        await query.edit_message_text(
            f"‚úÖ *¬°Tarea Finalizada!*\n\n"
            f"*C√≥digo:* `{tarea_finalizada.codigo}`\n"
            f"*T√≠tulo:* {tarea_finalizada.titulo}\n\n"
            f"La tarea ha sido marcada como completada exitosamente.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.exception(f"Error finalizando tarea {codigo}: {e}")
        
        # Determinar mensaje de error
        error_msg = "‚ùå *Error al Finalizar*\n\n"
        
        if "404" in str(e) or "not found" in str(e).lower():
            error_msg += "La tarea no fue encontrada o ya fue finalizada."
        elif "403" in str(e) or "forbidden" in str(e).lower():
            error_msg += "No tienes permisos para finalizar esta tarea."
        else:
            error_msg += "Ocurri√≥ un error al procesar la solicitud.\nIntenta nuevamente m√°s tarde."
        
        keyboard = KeyboardFactory.main_menu()
        await query.edit_message_text(
            error_msg,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )


# Exportar handler configurado
callback_handler = CallbackQueryHandler(handle_callback_query)
