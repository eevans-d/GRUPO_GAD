# -*- coding: utf-8 -*-
"""
Manejador central para todos los callback queries del bot.
"""

from telegram import Update
from telegram.ext import CallbackContext, CallbackQueryHandler
from telegram import Bot, Chat, User
from loguru import logger

from src.bot.utils.keyboards import KeyboardFactory


async def handle_callback_query(
    update: Update, 
    context: CallbackContext[Bot, Update, Chat, User]
) -> None:
    """
    Procesa todos los callbacks del bot usando patr√≥n {action}:{entity}:{id}.
    
    Args:
        update: Update de Telegram con callback_query
        context: Contexto de la conversaci√≥n
    """
    query = update.callback_query
    
    if query is None:
        return
    
    # Acknowledge inmediato para evitar spinner infinito
    await query.answer()
    
    callback_data = query.data
    
    if not callback_data:
        await query.edit_message_text("‚ùå Error: callback inv√°lido")
        return
    
    parts = callback_data.split(":")
    
    if len(parts) < 2:
        await query.edit_message_text("‚ùå Error: formato de callback inv√°lido")
        return
    
    action = parts[0]
    entity = parts[1]
    
    # Log estructurado
    logger.bind(callback=True).info(
        f"Callback procesado: {callback_data}",
        user_id=update.effective_user.id if update.effective_user else None,
        action=action,
        entity=entity
    )
    
    # Router de acciones
    try:
        if action == "menu":
            await handle_menu_action(query, context, entity, parts[2:])
        elif action == "crear":
            await handle_crear_action(query, context, entity, parts[2:])
        elif action == "finalizar":
            await handle_finalizar_action(query, context, entity, parts[2:])
        elif action == "page":
            await handle_pagination_action(query, context, entity, parts[2:])
        else:
            await query.edit_message_text(f"‚ùå Acci√≥n desconocida: {action}")
    except Exception as e:
        logger.exception(f"Error procesando callback: {e}")
        await query.answer("‚ùå Error procesando acci√≥n. Intenta nuevamente.", show_alert=True)


async def handle_menu_action(
    query, 
    context: CallbackContext[Bot, Update, Chat, User], 
    entity: str, 
    params: list
) -> None:
    """
    Maneja acciones del men√∫ principal.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto de la conversaci√≥n
        entity: Entidad del men√∫ (crear, finalizar, tareas, ayuda)
        params: Par√°metros adicionales del callback
    """
    if entity == "main":
        # Volver al men√∫ principal
        keyboard = KeyboardFactory.main_menu()
        await query.edit_message_text(
            "ü§ñ *Men√∫ Principal*\n\nSelecciona una opci√≥n:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif entity == "crear":
        # Iniciar wizard de creaci√≥n (MVP: solo mostrar tipos)
        keyboard = KeyboardFactory.task_types()
        await query.edit_message_text(
            "üìù *Crear Nueva Tarea*\n\n"
            "Paso 1: Selecciona el tipo de tarea:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif entity == "finalizar":
        # Mostrar mensaje temporal (se implementa en Fase 3)
        keyboard = KeyboardFactory.back_button()
        await query.edit_message_text(
            "‚úÖ *Finalizar Tarea*\n\n"
            "üöß Esta funci√≥n se implementar√° en la Fase 3.\n"
            "Por ahora, usa el comando `/finalizar <codigo>`",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif entity == "tareas":
        # Mostrar lista de tareas (MVP: mensaje temporal)
        keyboard = KeyboardFactory.back_button()
        await query.edit_message_text(
            "üìä *Mis Tareas*\n\n"
            "üöß Lista de tareas en desarrollo.\n"
            "Pr√≥ximamente: visualizaci√≥n completa.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif entity == "ayuda":
        # Mostrar ayuda
        keyboard = KeyboardFactory.back_button()
        help_text = (
            "‚ÑπÔ∏è *Ayuda - GAD Bot*\n\n"
            "*Comandos disponibles:*\n"
            "‚Ä¢ `/start` - Men√∫ principal\n"
            "‚Ä¢ `/crear` - Crear tarea (texto)\n"
            "‚Ä¢ `/finalizar` - Finalizar tarea (texto)\n\n"
            "*Botones interactivos:*\n"
            "‚Ä¢ üìã Crear Tarea - Wizard guiado\n"
            "‚Ä¢ ‚úÖ Finalizar - Selector de tareas\n"
            "‚Ä¢ üìä Mis Tareas - Lista personal\n\n"
            "*Estado:*\n"
            "‚úÖ Men√∫ principal - Funcional\n"
            "üöß Wizard de creaci√≥n - En desarrollo\n"
            "üöß Finalizar con botones - En desarrollo"
        )
        await query.edit_message_text(
            help_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    else:
        await query.edit_message_text(f"‚ùå Opci√≥n de men√∫ desconocida: {entity}")


async def handle_crear_action(
    query, 
    context: CallbackContext[Bot, Update, Chat, User], 
    entity: str, 
    params: list
) -> None:
    """
    Maneja wizard de creaci√≥n de tareas.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto de la conversaci√≥n
        entity: Paso del wizard (tipo, cancel)
        params: Par√°metros adicionales
    """
    if entity == "tipo":
        # Usuario seleccion√≥ un tipo de tarea
        if not params:
            await query.edit_message_text("‚ùå Error: tipo de tarea no especificado")
            return
        
        tipo = params[0]
        
        # Guardar en contexto de usuario
        if 'wizard' not in context.user_data:
            context.user_data['wizard'] = {}
        
        context.user_data['wizard']['tipo'] = tipo
        
        # MVP: Mostrar mensaje de confirmaci√≥n y volver al men√∫
        keyboard = KeyboardFactory.back_button()
        await query.edit_message_text(
            f"‚úÖ *Tipo Seleccionado: {tipo}*\n\n"
            f"üöß El wizard completo se implementar√° en la Fase 2.\n\n"
            f"Por ahora, usa el comando:\n"
            f"`/crear <codigo> <titulo> {tipo} <id_delegado> <id_asignado1> ...`",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif entity == "cancel":
        # Cancelar wizard
        if 'wizard' in context.user_data:
            del context.user_data['wizard']
        
        keyboard = KeyboardFactory.main_menu()
        await query.edit_message_text(
            "‚ùå *Creaci√≥n Cancelada*\n\n"
            "Volviendo al men√∫ principal...",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    else:
        await query.edit_message_text(f"‚ùå Acci√≥n de creaci√≥n desconocida: {entity}")


async def handle_finalizar_action(
    query, 
    context: CallbackContext[Bot, Update, Chat, User], 
    entity: str, 
    params: list
) -> None:
    """
    Maneja finalizaci√≥n de tareas.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto de la conversaci√≥n
        entity: Acci√≥n (select, confirm)
        params: Par√°metros adicionales
    """
    # MVP: Solo mensaje temporal
    keyboard = KeyboardFactory.back_button()
    await query.edit_message_text(
        "‚úÖ *Finalizar Tarea*\n\n"
        "üöß Se implementar√° en la Fase 3.\n"
        "Incluir√°:\n"
        "‚Ä¢ Lista de tareas pendientes\n"
        "‚Ä¢ Selector con botones\n"
        "‚Ä¢ Confirmaci√≥n antes de finalizar",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


async def handle_pagination_action(
    query, 
    context: CallbackContext[Bot, Update, Chat, User], 
    entity: str, 
    params: list
) -> None:
    """
    Maneja navegaci√≥n de p√°ginas en listas paginadas.
    
    Args:
        query: CallbackQuery de Telegram
        context: Contexto de la conversaci√≥n
        entity: N√∫mero de p√°gina
        params: Par√°metros adicionales
    """
    # MVP: Mensaje temporal
    await query.answer("üöß Paginaci√≥n se implementar√° en Fase 3", show_alert=False)


# Exportar handler configurado
callback_handler = CallbackQueryHandler(handle_callback_query)
