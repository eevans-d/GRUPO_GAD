# -*- coding: utf-8 -*-
"""
Sistema de confirmaciones consistentes con previsualizaci√≥n.

Este m√≥dulo implementa Quick Win #1: Confirmaciones consistentes
- Patr√≥n est√°ndar "Confirmar / Editar / Cancelar"
- Eliminar confirmaciones ciegas
- Previsualizaci√≥n clara antes de acciones cr√≠ticas
"""

from typing import Optional, Dict, Any, List
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from src.bot.utils.emojis import StatusEmojis, ActionEmojis, TaskEmojis, UserEmojis
from src.bot.utils.validators import UnifiedCopy, CopyFormatter


class ConfirmationPattern:
    """
    Patrones de confirmaci√≥n estandarizados.
    
    Quick Win #1: Patr√≥n consistente en todos los flujos.
    """
    
    # Botones est√°ndar
    BTN_CONFIRM = f"{StatusEmojis.SUCCESS} {UnifiedCopy.BUTTON_CONFIRMAR}"
    BTN_EDIT = f"{ActionEmojis.EDIT} {UnifiedCopy.BUTTON_EDITAR}"
    BTN_CANCEL = f"{ActionEmojis.CANCEL} {UnifiedCopy.BUTTON_CANCELAR}"
    BTN_BACK = f"{ActionEmojis.BACK} {UnifiedCopy.BUTTON_VOLVER}"
    
    @staticmethod
    def standard_confirmation(
        action: str,
        entity_id: Optional[str] = None
    ) -> InlineKeyboardMarkup:
        """
        Teclado de confirmaci√≥n est√°ndar: Confirmar / Editar / Cancelar.
        
        Quick Win #1: Patr√≥n estandarizado en todo el sistema.
        
        Args:
            action: Acci√≥n a confirmar (crear, finalizar, etc.)
            entity_id: ID de entidad (opcional)
        
        Returns:
            Teclado inline con opciones est√°ndar
        
        Example:
            >>> keyboard = ConfirmationPattern.standard_confirmation("crear")
        """
        entity_suffix = f":{entity_id}" if entity_id else ""
        
        keyboard = [
            [
                InlineKeyboardButton(
                    ConfirmationPattern.BTN_CONFIRM,
                    callback_data=f"{action}:confirm:yes{entity_suffix}"
                )
            ],
            [
                InlineKeyboardButton(
                    ConfirmationPattern.BTN_EDIT,
                    callback_data=f"{action}:confirm:edit{entity_suffix}"
                ),
                InlineKeyboardButton(
                    ConfirmationPattern.BTN_CANCEL,
                    callback_data=f"{action}:cancel{entity_suffix}"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def simple_confirmation(
        action: str,
        entity_id: Optional[str] = None
    ) -> InlineKeyboardMarkup:
        """
        Confirmaci√≥n simple: S√≠ / No.
        
        Args:
            action: Acci√≥n a confirmar
            entity_id: ID de entidad (opcional)
        
        Returns:
            Teclado inline simple
        """
        entity_suffix = f":{entity_id}" if entity_id else ""
        
        keyboard = [
            [
                InlineKeyboardButton(
                    f"{StatusEmojis.SUCCESS} S√≠",
                    callback_data=f"{action}:confirm:yes{entity_suffix}"
                ),
                InlineKeyboardButton(
                    f"{ActionEmojis.CANCEL} No",
                    callback_data=f"{action}:confirm:no{entity_suffix}"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def destructive_confirmation(
        action: str,
        entity_id: Optional[str] = None
    ) -> InlineKeyboardMarkup:
        """
        Confirmaci√≥n para acciones destructivas (eliminaci√≥n).
        
        Args:
            action: Acci√≥n destructiva
            entity_id: ID de entidad
        
        Returns:
            Teclado con advertencia visual
        """
        entity_suffix = f":{entity_id}" if entity_id else ""
        
        keyboard = [
            [
                InlineKeyboardButton(
                    f"{StatusEmojis.WARNING} S√≠, Eliminar",
                    callback_data=f"{action}:confirm:delete{entity_suffix}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"{ActionEmojis.CANCEL} No, Mantener",
                    callback_data=f"{action}:cancel{entity_suffix}"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)


class ConfirmationFormatter:
    """
    Formateadores de mensajes de confirmaci√≥n con previsualizaci√≥n.
    
    Quick Win #1: Previsualizaci√≥n clara antes de confirmar.
    """
    
    @staticmethod
    def format_task_confirmation(task_data: Dict[str, Any]) -> str:
        """
        Formatea confirmaci√≥n de tarea con previsualizaci√≥n completa.
        
        Quick Win #1: Eliminar confirmaciones ciegas con preview detallado.
        
        Args:
            task_data: Datos de la tarea a crear
        
        Returns:
            Mensaje formateado con preview completo
        
        Example:
            >>> msg = format_task_confirmation({
            ...     'codigo': 'OPE-2025-001',
            ...     'titulo': 'Reparar tuber√≠a',
            ...     'tipo': 'OPERATIVO',
            ...     'delegado_id': 101,
            ...     'asignados': [201, 202]
            ... })
        """
        # Extraer datos
        codigo = task_data.get('codigo', 'N/A')
        titulo = task_data.get('titulo', 'N/A')
        tipo = task_data.get('tipo', 'N/A')
        delegado_id = task_data.get('delegado_id')
        delegado_nombre = task_data.get('delegado_nombre', f'ID {delegado_id}')
        asignados = task_data.get('asignados', [])
        asignados_nombres = task_data.get('asignados_nombres', [])
        
        # Obtener emoji del tipo
        tipo_emoji = TaskEmojis.OPERATIONAL if tipo == "OPERATIVO" else \
                    TaskEmojis.ADMINISTRATIVE if tipo == "ADMINISTRATIVO" else \
                    TaskEmojis.EMERGENCY
        
        # Header con progreso
        message = (
            f"üìã *Crear Nueva Tarea* [Paso 6/6]\n"
            f"‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞ 100%\n\n"
            f"{StatusEmojis.SUCCESS} *¬°Casi listo! Revisa los detalles:*\n"
            f"{'‚îÅ' * 35}\n\n"
        )
        
        # Datos de la tarea
        message += (
            f"üî§ *C√≥digo:* `{codigo}`\n"
            f"üìù *T√≠tulo:* {titulo}\n"
            f"{tipo_emoji} *Tipo:* {tipo}\n\n"
        )
        
        # Delegado con terminolog√≠a unificada
        message += f"{UserEmojis.SUPERVISOR} *{UnifiedCopy.DELEGADO_TERM}:* {delegado_nombre}\n"
        message += f"   _{UnifiedCopy.DELEGADO_DESC}_\n\n"
        
        # Asignados con terminolog√≠a unificada
        if asignados_nombres:
            nombres_str = ', '.join(asignados_nombres[:3])
            if len(asignados_nombres) > 3:
                nombres_str += f" y {len(asignados_nombres) - 3} m√°s"
            message += f"{UserEmojis.TEAM} *{UnifiedCopy.ASIGNADOS_TERM}:* {nombres_str}\n"
        elif asignados:
            message += f"{UserEmojis.TEAM} *{UnifiedCopy.ASIGNADOS_TERM}:* {len(asignados)} personas\n"
        else:
            message += f"{UserEmojis.TEAM} *{UnifiedCopy.ASIGNADOS_TERM}:* Sin asignar\n"
        
        message += f"   _{UnifiedCopy.ASIGNADOS_DESC}_\n\n"
        
        message += f"{'‚îÅ' * 35}\n\n"
        
        # Advertencias y pr√≥ximos pasos
        message += (
            f"{StatusEmojis.WARNING} *Importante:*\n"
            f"‚Ä¢ Verifica que todos los datos sean correctos\n"
            f"‚Ä¢ La tarea ser√° notificada al equipo autom√°ticamente\n"
            f"‚Ä¢ Una vez creada, se registrar√° en el sistema\n\n"
            f"{StatusEmojis.INFO} *¬øTodo correcto?*\n"
            f"‚Ä¢ {ConfirmationPattern.BTN_CONFIRM} si los datos son correctos\n"
            f"‚Ä¢ {ConfirmationPattern.BTN_EDIT} para modificar algo\n"
            f"‚Ä¢ {ConfirmationPattern.BTN_CANCEL} para descartar\n"
        )
        
        return message
    
    @staticmethod
    def format_finalize_confirmation(task_data: Dict[str, Any]) -> str:
        """
        Formatea confirmaci√≥n de finalizaci√≥n de tarea.
        
        Args:
            task_data: Datos de la tarea a finalizar
        
        Returns:
            Mensaje con previsualizaci√≥n
        """
        codigo = task_data.get('codigo', 'N/A')
        titulo = task_data.get('titulo', 'N/A')
        notas = task_data.get('notas', 'Sin notas adicionales')
        
        message = (
            f"{TaskEmojis.COMPLETE} *Finalizar Tarea*\n"
            f"{'‚îÅ' * 35}\n\n"
            f"{StatusEmojis.INFO} *Est√°s por finalizar:*\n\n"
            f"üî§ *C√≥digo:* `{codigo}`\n"
            f"üìù *T√≠tulo:* {titulo}\n"
            f"üìã *Notas:* {notas}\n\n"
            f"{'‚îÅ' * 35}\n\n"
            f"{StatusEmojis.WARNING} *Confirmaci√≥n requerida:*\n"
            f"Al finalizar esta tarea:\n"
            f"‚Ä¢ Se marcar√° como completada en el sistema\n"
            f"‚Ä¢ Se notificar√° al supervisor\n"
            f"‚Ä¢ No podr√° revertirse f√°cilmente\n\n"
            f"{StatusEmojis.INFO} *¬øConfirmar finalizaci√≥n?*\n"
        )
        
        return message
    
    @staticmethod
    def format_delete_confirmation(
        item_type: str,
        item_id: str,
        item_name: Optional[str] = None
    ) -> str:
        """
        Formatea confirmaci√≥n de eliminaci√≥n (acci√≥n destructiva).
        
        Args:
            item_type: Tipo de √≠tem (Tarea, Usuario, etc.)
            item_id: ID del √≠tem
            item_name: Nombre del √≠tem (opcional)
        
        Returns:
            Mensaje con advertencia clara
        """
        display_name = item_name or item_id
        
        message = (
            f"{StatusEmojis.WARNING} *¬°Acci√≥n Irreversible!*\n"
            f"{'‚îÅ' * 35}\n\n"
            f"Est√°s por eliminar:\n\n"
            f"*{item_type}:* {display_name}\n"
            f"*ID:* `{item_id}`\n\n"
            f"{'‚îÅ' * 35}\n\n"
            f"{StatusEmojis.ERROR} *Advertencia:*\n"
            f"‚Ä¢ Esta acci√≥n NO puede revertirse\n"
            f"‚Ä¢ Todos los datos asociados se perder√°n\n"
            f"‚Ä¢ Las notificaciones se enviar√°n\n\n"
            f"{StatusEmojis.INFO} *¬øEst√°s completamente seguro?*\n"
        )
        
        return message
    
    @staticmethod
    def format_edit_mode_message() -> str:
        """
        Mensaje cuando el usuario elige editar.
        
        Returns:
            Mensaje explicando modo edici√≥n
        """
        return (
            f"{ActionEmojis.EDIT} *Modo Edici√≥n Activado*\n\n"
            f"Puedes modificar los datos ingresados.\n\n"
            f"{StatusEmojis.INFO} *Opciones:*\n"
            f"‚Ä¢ Usa los botones para navegar a cada paso\n"
            f"‚Ä¢ Modifica solo lo necesario\n"
            f"‚Ä¢ Regresa a confirmaci√≥n cuando termines\n\n"
            f"{ActionEmojis.CANCEL} Cancelar: /cancelar"
        )
    
    @staticmethod
    def format_cancel_message() -> str:
        """
        Mensaje cuando el usuario cancela.
        
        Returns:
            Mensaje de cancelaci√≥n amigable
        """
        return (
            f"{ActionEmojis.CANCEL} *Operaci√≥n Cancelada*\n\n"
            f"No se realizaron cambios en el sistema.\n\n"
            f"{StatusEmojis.INFO} *¬øQu√© deseas hacer?*\n"
            f"‚Ä¢ Usa /start para volver al men√∫ principal\n"
            f"‚Ä¢ Intenta la operaci√≥n nuevamente cuando est√©s listo\n\n"
            f"Si necesitas ayuda, usa /ayuda"
        )


class ConfirmationHelper:
    """
    Helpers para manejo de confirmaciones en handlers.
    """
    
    @staticmethod
    def should_show_confirmation(action: str) -> bool:
        """
        Determina si una acci√≥n requiere confirmaci√≥n.
        
        Quick Win #1: Lista centralizada de acciones que requieren confirmaci√≥n.
        
        Args:
            action: Acci√≥n a verificar
        
        Returns:
            True si requiere confirmaci√≥n
        """
        # Acciones que SIEMPRE requieren confirmaci√≥n
        requires_confirmation = [
            'crear',
            'finalizar',
            'eliminar',
            'modificar',
            'asignar_masivo',
            'cancelar_masivo'
        ]
        
        return action in requires_confirmation
    
    @staticmethod
    def build_confirmation_message(
        action: str,
        data: Dict[str, Any]
    ) -> str:
        """
        Construye mensaje de confirmaci√≥n seg√∫n el tipo de acci√≥n.
        
        Args:
            action: Tipo de acci√≥n
            data: Datos a confirmar
        
        Returns:
            Mensaje formateado
        """
        if action == 'crear':
            return ConfirmationFormatter.format_task_confirmation(data)
        elif action == 'finalizar':
            return ConfirmationFormatter.format_finalize_confirmation(data)
        elif action == 'eliminar':
            return ConfirmationFormatter.format_delete_confirmation(
                item_type=data.get('type', 'Item'),
                item_id=data.get('id', 'N/A'),
                item_name=data.get('name')
            )
        else:
            # Gen√©rico
            return (
                f"{StatusEmojis.INFO} *Confirmaci√≥n requerida*\n\n"
                f"¬øDeseas continuar con esta acci√≥n?\n\n"
                f"Acci√≥n: {action}\n"
            )
    
    @staticmethod
    def build_confirmation_keyboard(
        action: str,
        entity_id: Optional[str] = None,
        is_destructive: bool = False
    ) -> InlineKeyboardMarkup:
        """
        Construye teclado de confirmaci√≥n seg√∫n el tipo de acci√≥n.
        
        Args:
            action: Tipo de acci√≥n
            entity_id: ID de entidad
            is_destructive: Si es acci√≥n destructiva
        
        Returns:
            Teclado apropiado
        """
        if is_destructive or action == 'eliminar':
            return ConfirmationPattern.destructive_confirmation(action, entity_id)
        elif action in ['crear', 'modificar']:
            return ConfirmationPattern.standard_confirmation(action, entity_id)
        else:
            return ConfirmationPattern.simple_confirmation(action, entity_id)


# Tests y ejemplos
if __name__ == "__main__":
    print("=== Tests de Sistema de Confirmaciones ===\n")
    
    # Test 1: Confirmaci√≥n de tarea
    task_data = {
        'codigo': 'OPE-2025-001',
        'titulo': 'Reparar tuber√≠a principal edificio A',
        'tipo': 'OPERATIVO',
        'delegado_id': 101,
        'delegado_nombre': 'Juan P√©rez',
        'asignados': [201, 202, 203],
        'asignados_nombres': ['Mar√≠a L√≥pez', 'Pedro G√≥mez', 'Ana Mart√≠nez']
    }
    
    message = ConfirmationFormatter.format_task_confirmation(task_data)
    print(message)
    print("\n" + "="*50 + "\n")
    
    # Test 2: Teclado est√°ndar
    keyboard = ConfirmationPattern.standard_confirmation("crear")
    print("Teclado est√°ndar generado:")
    for row in keyboard.inline_keyboard:
        for button in row:
            print(f"  - {button.text} -> {button.callback_data}")
    
    print("\n" + "="*50 + "\n")
    
    # Test 3: Confirmaci√≥n destructiva
    del_msg = ConfirmationFormatter.format_delete_confirmation(
        item_type="Tarea",
        item_id="OPE-2025-001",
        item_name="Reparar tuber√≠a"
    )
    print(del_msg)
