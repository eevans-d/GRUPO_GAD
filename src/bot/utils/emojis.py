# -*- coding: utf-8 -*-
"""
Sistema centralizado de emojis para consistencia visual en el bot.

Este m√≥dulo define todos los emojis utilizados en el bot de Telegram,
organizados por categor√≠as sem√°nticas para facilitar su uso consistente
en toda la aplicaci√≥n.

Uso:
    from src.bot.utils.emojis import TaskEmojis, ActionEmojis
    
    message = f"{TaskEmojis.CREATE} Nueva tarea creada"
    status = f"{StatusEmojis.SUCCESS} Operaci√≥n exitosa"
"""


class TaskEmojis:
    """Emojis relacionados con tareas."""
    CREATE = "üìã"
    COMPLETE = "‚úÖ"
    PENDING = "‚è≥"
    IN_PROGRESS = "üîÑ"
    CANCELLED = "‚ùå"
    URGENT = "üö®"
    EMERGENCY = "üÜò"
    OPERATIONAL = "üîß"
    ADMINISTRATIVE = "üìÑ"
    SEARCH = "üîç"
    LIST = "üìä"


class UserEmojis:
    """Emojis relacionados con usuarios y roles."""
    ADMIN = "üëë"
    SUPERVISOR = "üë§"
    AGENT = "üßë‚Äçüíº"
    DELEGATED = "üì§"
    ASSIGNED = "üì•"
    TEAM = "üë•"
    ID = "üÜî"


class ActionEmojis:
    """Emojis para acciones del bot."""
    START = "üöÄ"
    STOP = "üõë"
    EDIT = "‚úèÔ∏è"
    DELETE = "üóëÔ∏è"
    SAVE = "üíæ"
    SEND = "üì§"
    RECEIVE = "üì•"
    BACK = "üîô"
    FORWARD = "‚è©"
    REFRESH = "üîÑ"
    CONFIRM = "‚úîÔ∏è"
    CANCEL = "üö´"


class StatusEmojis:
    """Emojis para estados y feedback."""
    SUCCESS = "‚úÖ"
    ERROR = "‚ùå"
    WARNING = "‚ö†Ô∏è"
    INFO = "‚ÑπÔ∏è"
    LOADING = "‚è≥"
    DONE = "‚úîÔ∏è"
    PENDING = "‚è∏Ô∏è"
    ATTENTION = "‚ö°"


class NavigationEmojis:
    """Emojis para navegaci√≥n."""
    MENU = "üì±"
    HOME = "üè†"
    BACK = "‚óÄÔ∏è"
    FORWARD = "‚ñ∂Ô∏è"
    UP = "‚¨ÜÔ∏è"
    DOWN = "‚¨áÔ∏è"
    LEFT = "‚¨ÖÔ∏è"
    RIGHT = "‚û°Ô∏è"
    EXPAND = "üìÇ"
    COLLAPSE = "üìÅ"


class GeneralEmojis:
    """Emojis generales y miscel√°neos."""
    ROBOT = "ü§ñ"
    WELCOME = "üëã"
    HELP = "‚ùì"
    SETTINGS = "‚öôÔ∏è"
    NOTIFICATION = "üîî"
    MESSAGE = "üí¨"
    CALENDAR = "üìÖ"
    CLOCK = "üïê"
    LOCATION = "üìç"
    PHONE = "üìû"
    EMAIL = "üìß"
    LINK = "üîó"
    KEY = "üîë"
    LOCK = "üîí"
    UNLOCK = "üîì"


class ProgressEmojis:
    """Emojis para barras de progreso y porcentajes."""
    FILLED = "‚ñ∞"
    EMPTY = "‚ñ±"
    PERCENT_0 = "0Ô∏è‚É£"
    PERCENT_25 = "2Ô∏è‚É£5Ô∏è‚É£"
    PERCENT_50 = "5Ô∏è‚É£0Ô∏è‚É£"
    PERCENT_75 = "7Ô∏è‚É£5Ô∏è‚É£"
    PERCENT_100 = "üíØ"


class ValidationEmojis:
    """Emojis para validaci√≥n de campos."""
    VALID = "‚úÖ"
    INVALID = "‚ùå"
    REQUIRED = "‚ö†Ô∏è"
    OPTIONAL = "üîò"
    FORMAT_OK = "‚úîÔ∏è"
    FORMAT_ERROR = "‚ùó"


# Mapeo de tipos de tarea a emojis
TASK_TYPE_EMOJI = {
    "OPERATIVO": TaskEmojis.OPERATIONAL,
    "ADMINISTRATIVO": TaskEmojis.ADMINISTRATIVE,
    "EMERGENCIA": TaskEmojis.EMERGENCY,
}

# Mapeo de estados de tarea a emojis
TASK_STATUS_EMOJI = {
    "pending": TaskEmojis.PENDING,
    "in_progress": TaskEmojis.IN_PROGRESS,
    "completed": TaskEmojis.COMPLETE,
    "cancelled": TaskEmojis.CANCELLED,
}


def get_task_emoji(task_type: str) -> str:
    """
    Obtiene el emoji correspondiente a un tipo de tarea.
    
    Args:
        task_type: Tipo de tarea (OPERATIVO, ADMINISTRATIVO, EMERGENCIA)
    
    Returns:
        Emoji correspondiente o emoji gen√©rico si no se encuentra
    """
    return TASK_TYPE_EMOJI.get(task_type.upper(), TaskEmojis.CREATE)


def get_status_emoji(status: str) -> str:
    """
    Obtiene el emoji correspondiente a un estado de tarea.
    
    Args:
        status: Estado de la tarea (pending, in_progress, completed, cancelled)
    
    Returns:
        Emoji correspondiente o emoji gen√©rico si no se encuentra
    """
    return TASK_STATUS_EMOJI.get(status.lower(), StatusEmojis.INFO)


def format_boolean(value: bool) -> str:
    """
    Formatea un valor booleano con emojis.
    
    Args:
        value: Valor booleano a formatear
    
    Returns:
        Emoji de √©xito o error seg√∫n el valor
    """
    return StatusEmojis.SUCCESS if value else StatusEmojis.ERROR


def format_progress(current: int, total: int, width: int = 6) -> str:
    """
    Crea una barra de progreso visual con emojis.
    
    Args:
        current: Valor actual
        total: Valor total
        width: Ancho de la barra (n√∫mero de bloques)
    
    Returns:
        Barra de progreso con emojis
    """
    if total == 0:
        return ProgressEmojis.EMPTY * width
    
    percentage = current / total
    filled = int(percentage * width)
    empty = width - filled
    
    return (ProgressEmojis.FILLED * filled) + (ProgressEmojis.EMPTY * empty)
